
projstm32f303cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008738  08008738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  0000a014  2**0
                  CONTENTS
  4 .ARM          00000000  08008988  08008988  0000a014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008988  08008988  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800898c  0800898c  0000998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08008990  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a014  2**0
                  CONTENTS
 10 .bss          00002554  20000018  20000018  0000a018  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000256c  2000256c  0000a018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019279  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004312  00000000  00000000  000232bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  000275d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f81  00000000  00000000  00028a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208dd  00000000  00000000  000299b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff28  00000000  00000000  0004a296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf841  00000000  00000000  0006a1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001299ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005188  00000000  00000000  00129a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0012ebcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008720 	.word	0x08008720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08008720 	.word	0x08008720

080001d0 <BtnDebouce_Prc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BtnDebouce_Prc */
void BtnDebouce_Prc(void *argument)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08a      	sub	sp, #40	@ 0x28
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	smsQ_buff_motor smsQ_ctrMotor;
	smsQ_buff_led smsQ_ctrLED;
  /* Infinite loop */
  for(;;)
  {
	memset(&smsQ_ctr, '\0', sizeof(smsQ_ctr));
 80001d8:	f107 031c 	add.w	r3, r7, #28
 80001dc:	220c      	movs	r2, #12
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f008 fa63 	bl	80086ac <memset>
	if(osOK != osMessageQueueGet(smsQ_EXTIHandle, &smsQ_ctr, 0, osWaitForever))
 80001e6:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <BtnDebouce_Prc+0xa8>)
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	f107 011c 	add.w	r1, r7, #28
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	2200      	movs	r2, #0
 80001f4:	f005 f9e8 	bl	80055c8 <osMessageQueueGet>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d000      	beq.n	8000200 <BtnDebouce_Prc+0x30>
		__NOP();
 80001fe:	bf00      	nop
/*-----------------------------------------------------------*/
	// turn of ISR Can interface
	if (idEXTI == smsQ_ctr.id)
 8000200:	7f3b      	ldrb	r3, [r7, #28]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d11b      	bne.n	800023e <BtnDebouce_Prc+0x6e>
	{
		if (smsQ_ctr.speed_left > SPEED_MAX || smsQ_ctr.speed_right > SPEED_MAX)
 8000206:	8c3b      	ldrh	r3, [r7, #32]
 8000208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800020c:	d803      	bhi.n	8000216 <BtnDebouce_Prc+0x46>
 800020e:	8bfb      	ldrh	r3, [r7, #30]
 8000210:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000214:	d904      	bls.n	8000220 <BtnDebouce_Prc+0x50>
		{
			smsQ_ctr.speed_left = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	843b      	strh	r3, [r7, #32]
			smsQ_ctr.speed_right = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	83fb      	strh	r3, [r7, #30]
 800021e:	e012      	b.n	8000246 <BtnDebouce_Prc+0x76>
		}
		else
		{
			smsQ_ctrMotor.estate = smsQ_ctr.state_robot;
 8000220:	7f7b      	ldrb	r3, [r7, #29]
 8000222:	757b      	strb	r3, [r7, #21]
			smsQ_ctrMotor.speed_left = smsQ_ctr.speed_left;
 8000224:	8c3b      	ldrh	r3, [r7, #32]
 8000226:	b21b      	sxth	r3, r3
 8000228:	833b      	strh	r3, [r7, #24]
			smsQ_ctrMotor.speed_right = smsQ_ctr.speed_right;
 800022a:	8bfb      	ldrh	r3, [r7, #30]
 800022c:	b21b      	sxth	r3, r3
 800022e:	82fb      	strh	r3, [r7, #22]

			smsQ_ctrLED.time_blink_D4 = smsQ_ctr.time_blink_D4;
 8000230:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000232:	81bb      	strh	r3, [r7, #12]
			smsQ_ctrLED.time_blink_D5 = smsQ_ctr.time_blink_D5;
 8000234:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000236:	81fb      	strh	r3, [r7, #14]
			smsQ_ctrLED.time_blink_D6 = smsQ_ctr.time_blink_D6;
 8000238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800023a:	823b      	strh	r3, [r7, #16]
 800023c:	e003      	b.n	8000246 <BtnDebouce_Prc+0x76>
		}
	}
	else if (idCAN == smsQ_ctr.id)
 800023e:	7f3b      	ldrb	r3, [r7, #28]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d113      	bne.n	800026c <BtnDebouce_Prc+0x9c>
	{
		__NOP();
 8000244:	bf00      	nop
	else
	{
		break;
	}
/*-----------------------------------------------------------*/
	osMessageQueuePut(smsQ_CtrLEDHandle, (const void *)&smsQ_ctrLED, 0, 100);
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <BtnDebouce_Prc+0xac>)
 8000248:	6818      	ldr	r0, [r3, #0]
 800024a:	f107 010c 	add.w	r1, r7, #12
 800024e:	2364      	movs	r3, #100	@ 0x64
 8000250:	2200      	movs	r2, #0
 8000252:	f005 f945 	bl	80054e0 <osMessageQueuePut>
	smsQ_ctrMotor.id = idROUNT;
 8000256:	2302      	movs	r3, #2
 8000258:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(smsQ_CtrMHandle, (const void *)&smsQ_ctrMotor, 0, 100);
 800025a:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <BtnDebouce_Prc+0xb0>)
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	f107 0114 	add.w	r1, r7, #20
 8000262:	2364      	movs	r3, #100	@ 0x64
 8000264:	2200      	movs	r2, #0
 8000266:	f005 f93b 	bl	80054e0 <osMessageQueuePut>
	memset(&smsQ_ctr, '\0', sizeof(smsQ_ctr));
 800026a:	e7b5      	b.n	80001d8 <BtnDebouce_Prc+0x8>
		break;
 800026c:	bf00      	nop

	// osDelay(1000);
  }
  /* USER CODE END BtnDebouce_Prc */
}
 800026e:	bf00      	nop
 8000270:	3728      	adds	r7, #40	@ 0x28
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000168 	.word	0x20000168
 800027c:	20000164 	.word	0x20000164
 8000280:	20000160 	.word	0x20000160

08000284 <LED_Processor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Processor */
void LED_Processor(void *argument)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Processor */
	eLed_taskState eState = LED_INIT;
 800028c:	2300      	movs	r3, #0
 800028e:	75fb      	strb	r3, [r7, #23]

	smsQ_buff_led smsQ_ctr_led = {0, 0, 0};
 8000290:	2300      	movs	r3, #0
 8000292:	813b      	strh	r3, [r7, #8]
 8000294:	2300      	movs	r3, #0
 8000296:	817b      	strh	r3, [r7, #10]
 8000298:	2300      	movs	r3, #0
 800029a:	81bb      	strh	r3, [r7, #12]

	uint8_t countD4 = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	75bb      	strb	r3, [r7, #22]
	uint8_t countD5 = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	757b      	strb	r3, [r7, #21]
	uint8_t countD6 = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  switch (eState){
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	f000 808a 	beq.w	80003c4 <LED_Processor+0x140>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	f300 80c3 	bgt.w	800043c <LED_Processor+0x1b8>
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d002      	beq.n	80002c0 <LED_Processor+0x3c>
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d05b      	beq.n	8000376 <LED_Processor+0xf2>
			  // return - change time blink leds
			  eState = LED_IDLE;
			  break;

		  default:
			  break;
 80002be:	e0bd      	b.n	800043c <LED_Processor+0x1b8>
			  for(int i = 0; i < 5; i++){
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	e04a      	b.n	800035c <LED_Processor+0xd8>
				  LED4_ON;
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d0:	f002 f810 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED5_OFF;
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002de:	f002 f809 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED6_OFF;
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ec:	f002 f802 	bl	80022f4 <HAL_GPIO_WritePin>
				  osDelay(100);
 80002f0:	2064      	movs	r0, #100	@ 0x64
 80002f2:	f004 fef9 	bl	80050e8 <osDelay>
				  LED4_OFF;
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000300:	f001 fff8 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED5_ON;
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800030a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030e:	f001 fff1 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED6_OFF;
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f001 ffea 	bl	80022f4 <HAL_GPIO_WritePin>
				  osDelay(100);
 8000320:	2064      	movs	r0, #100	@ 0x64
 8000322:	f004 fee1 	bl	80050e8 <osDelay>
				  LED4_OFF;
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800032c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000330:	f001 ffe0 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED5_OFF;
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800033a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800033e:	f001 ffd9 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED6_ON;
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034c:	f001 ffd2 	bl	80022f4 <HAL_GPIO_WritePin>
				  osDelay(100);
 8000350:	2064      	movs	r0, #100	@ 0x64
 8000352:	f004 fec9 	bl	80050e8 <osDelay>
			  for(int i = 0; i < 5; i++){
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	3301      	adds	r3, #1
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	2b04      	cmp	r3, #4
 8000360:	ddb1      	ble.n	80002c6 <LED_Processor+0x42>
			  LED6_OFF;
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036c:	f001 ffc2 	bl	80022f4 <HAL_GPIO_WritePin>
			  eState = LED_IDLE;
 8000370:	2301      	movs	r3, #1
 8000372:	75fb      	strb	r3, [r7, #23]
			  break;
 8000374:	e063      	b.n	800043e <LED_Processor+0x1ba>
			  if(osErrorTimeout == osMessageQueueGet(smsQ_CtrLEDHandle, &smsQ_ctr_led, 0, 1))
 8000376:	4b34      	ldr	r3, [pc, #208]	@ (8000448 <LED_Processor+0x1c4>)
 8000378:	6818      	ldr	r0, [r3, #0]
 800037a:	f107 0108 	add.w	r1, r7, #8
 800037e:	2301      	movs	r3, #1
 8000380:	2200      	movs	r2, #0
 8000382:	f005 f921 	bl	80055c8 <osMessageQueueGet>
 8000386:	4603      	mov	r3, r0
 8000388:	f113 0f02 	cmn.w	r3, #2
 800038c:	d102      	bne.n	8000394 <LED_Processor+0x110>
				  eState = LED_RUN;
 800038e:	2302      	movs	r3, #2
 8000390:	75fb      	strb	r3, [r7, #23]
			  break;
 8000392:	e054      	b.n	800043e <LED_Processor+0x1ba>
				  LED4_OFF;
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800039a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039e:	f001 ffa9 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED5_OFF;
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ac:	f001 ffa2 	bl	80022f4 <HAL_GPIO_WritePin>
				  LED6_OFF;
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ba:	f001 ff9b 	bl	80022f4 <HAL_GPIO_WritePin>
				  eState = LED_RUN;
 80003be:	2302      	movs	r3, #2
 80003c0:	75fb      	strb	r3, [r7, #23]
			  break;
 80003c2:	e03c      	b.n	800043e <LED_Processor+0x1ba>
			  if(smsQ_ctr_led.time_blink_D4 != 0)
 80003c4:	893b      	ldrh	r3, [r7, #8]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00f      	beq.n	80003ea <LED_Processor+0x166>
				  if(countD4 >= smsQ_ctr_led.time_blink_D4)
 80003ca:	7dbb      	ldrb	r3, [r7, #22]
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	893b      	ldrh	r3, [r7, #8]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d307      	bcc.n	80003e4 <LED_Processor+0x160>
					  countD4 = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	75bb      	strb	r3, [r7, #22]
					  LED4_TOGGLE;
 80003d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f001 ffa0 	bl	8002324 <HAL_GPIO_TogglePin>
				  countD4++;
 80003e4:	7dbb      	ldrb	r3, [r7, #22]
 80003e6:	3301      	adds	r3, #1
 80003e8:	75bb      	strb	r3, [r7, #22]
			  if(smsQ_ctr_led.time_blink_D5 != 0)
 80003ea:	897b      	ldrh	r3, [r7, #10]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00f      	beq.n	8000410 <LED_Processor+0x18c>
				  if(countD5 >= smsQ_ctr_led.time_blink_D5)
 80003f0:	7d7b      	ldrb	r3, [r7, #21]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	897b      	ldrh	r3, [r7, #10]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d307      	bcc.n	800040a <LED_Processor+0x186>
					  countD5 = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	757b      	strb	r3, [r7, #21]
					  LED5_TOGGLE;
 80003fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000406:	f001 ff8d 	bl	8002324 <HAL_GPIO_TogglePin>
				  countD5++;
 800040a:	7d7b      	ldrb	r3, [r7, #21]
 800040c:	3301      	adds	r3, #1
 800040e:	757b      	strb	r3, [r7, #21]
			  if(smsQ_ctr_led.time_blink_D6 != 0)
 8000410:	89bb      	ldrh	r3, [r7, #12]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00f      	beq.n	8000436 <LED_Processor+0x1b2>
				  if(countD6 >= smsQ_ctr_led.time_blink_D6)
 8000416:	7d3b      	ldrb	r3, [r7, #20]
 8000418:	b29a      	uxth	r2, r3
 800041a:	89bb      	ldrh	r3, [r7, #12]
 800041c:	429a      	cmp	r2, r3
 800041e:	d307      	bcc.n	8000430 <LED_Processor+0x1ac>
					  countD6 = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	753b      	strb	r3, [r7, #20]
					  LED6_TOGGLE;
 8000424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f001 ff7a 	bl	8002324 <HAL_GPIO_TogglePin>
				  countD6++;
 8000430:	7d3b      	ldrb	r3, [r7, #20]
 8000432:	3301      	adds	r3, #1
 8000434:	753b      	strb	r3, [r7, #20]
			  eState = LED_IDLE;
 8000436:	2301      	movs	r3, #1
 8000438:	75fb      	strb	r3, [r7, #23]
			  break;
 800043a:	e000      	b.n	800043e <LED_Processor+0x1ba>
			  break;
 800043c:	bf00      	nop
	  }
	  osDelay(100);
 800043e:	2064      	movs	r0, #100	@ 0x64
 8000440:	f004 fe52 	bl	80050e8 <osDelay>
	  switch (eState){
 8000444:	e730      	b.n	80002a8 <LED_Processor+0x24>
 8000446:	bf00      	nop
 8000448:	20000164 	.word	0x20000164

0800044c <CANPrs_Process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANPrs_Process */
void CANPrs_Process(void *argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANPrs_Process */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f004 fe47 	bl	80050e8 <osDelay>
  {
 800045a:	bf00      	nop
 800045c:	e7fa      	b.n	8000454 <CANPrs_Process+0x8>
	...

08000460 <EncoderProcessor>:

encoder_user_t* enc_user_M;

/* USER CODE END Header_EncoderProcessor */
void EncoderProcessor(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b0a6      	sub	sp, #152	@ 0x98
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	eEncoder_taskState eState = ENC_INIT;
 8000468:	2301      	movs	r3, #1
 800046a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	move_aver_instance_int16 fillter_enc_right;
	move_aver_instance_int16 fillter_enc_left;
  /* Infinite loop */
  for(;;)
  {
	switch (eState) {
 800046e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000472:	2b02      	cmp	r3, #2
 8000474:	d023      	beq.n	80004be <EncoderProcessor+0x5e>
 8000476:	2b02      	cmp	r3, #2
 8000478:	dc5c      	bgt.n	8000534 <EncoderProcessor+0xd4>
 800047a:	2b00      	cmp	r3, #0
 800047c:	d01b      	beq.n	80004b6 <EncoderProcessor+0x56>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d158      	bne.n	8000534 <EncoderProcessor+0xd4>
		case ENC_INIT:
			Average_filter_reset(&fillter_enc_right);
 8000482:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fc5c 	bl	8000d44 <Average_filter_reset>
			Average_filter_reset(&fillter_enc_left);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fc57 	bl	8000d44 <Average_filter_reset>

			ENC_Init(&htim2, &htim3);
 8000496:	492a      	ldr	r1, [pc, #168]	@ (8000540 <EncoderProcessor+0xe0>)
 8000498:	482a      	ldr	r0, [pc, #168]	@ (8000544 <EncoderProcessor+0xe4>)
 800049a:	f000 fa21 	bl	80008e0 <ENC_Init>
			/*Start Encoders*/
			HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800049e:	213c      	movs	r1, #60	@ 0x3c
 80004a0:	4828      	ldr	r0, [pc, #160]	@ (8000544 <EncoderProcessor+0xe4>)
 80004a2:	f003 fca9 	bl	8003df8 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80004a6:	213c      	movs	r1, #60	@ 0x3c
 80004a8:	4825      	ldr	r0, [pc, #148]	@ (8000540 <EncoderProcessor+0xe0>)
 80004aa:	f003 fca5 	bl	8003df8 <HAL_TIM_Encoder_Start>

			eState = ENC_IDLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			break;
 80004b4:	e03f      	b.n	8000536 <EncoderProcessor+0xd6>
/*-----------------------------------------------------------*/
		case ENC_IDLE:

			eState = ENC_RUNNING;
 80004b6:	2302      	movs	r3, #2
 80004b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			break;
 80004bc:	e03b      	b.n	8000536 <EncoderProcessor+0xd6>
/*-----------------------------------------------------------*/
		case ENC_RUNNING:
			// encoder
			enc_user_M = ENCM_Handl();
 80004be:	f000 fa25 	bl	800090c <ENCM_Handl>
 80004c2:	4603      	mov	r3, r0
 80004c4:	4a20      	ldr	r2, [pc, #128]	@ (8000548 <EncoderProcessor+0xe8>)
 80004c6:	6013      	str	r3, [r2, #0]
			// debug
			speed_db_r = enc_user_M->enc_vel;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <EncoderProcessor+0xe8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004d0:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <EncoderProcessor+0xec>)
 80004d2:	801a      	strh	r2, [r3, #0]
			speed_db_l = (enc_user_M + 1)->enc_vel;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <EncoderProcessor+0xe8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	330c      	adds	r3, #12
 80004da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <EncoderProcessor+0xf0>)
 80004e0:	801a      	strh	r2, [r3, #0]

			osMutexAcquire(mutex_encHandle, 100);
 80004e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <EncoderProcessor+0xf4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2164      	movs	r1, #100	@ 0x64
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 fec5 	bl	8005278 <osMutexAcquire>
			speed_db_r_fill = Average_filter_apply(&fillter_enc_right, enc_user_M->enc_vel);
 80004ee:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <EncoderProcessor+0xe8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fc43 	bl	8000d88 <Average_filter_apply>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <EncoderProcessor+0xf8>)
 8000508:	801a      	strh	r2, [r3, #0]
			speed_db_l_fill = Average_filter_apply(&fillter_enc_left, (enc_user_M + 1)->enc_vel);
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <EncoderProcessor+0xe8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	330c      	adds	r3, #12
 8000510:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4611      	mov	r1, r2
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fc34 	bl	8000d88 <Average_filter_apply>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <EncoderProcessor+0xfc>)
 8000526:	801a      	strh	r2, [r3, #0]
			osMutexRelease(mutex_encHandle);
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <EncoderProcessor+0xf4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f004 ff01 	bl	8005334 <osMutexRelease>
			break;
 8000532:	e000      	b.n	8000536 <EncoderProcessor+0xd6>
		default:
			break;
 8000534:	bf00      	nop
	}
	// Sampling time
    osDelay(SAMP_TIME);
 8000536:	200a      	movs	r0, #10
 8000538:	f004 fdd6 	bl	80050e8 <osDelay>
	switch (eState) {
 800053c:	e797      	b.n	800046e <EncoderProcessor+0xe>
 800053e:	bf00      	nop
 8000540:	2000020c 	.word	0x2000020c
 8000544:	200001c0 	.word	0x200001c0
 8000548:	2000003c 	.word	0x2000003c
 800054c:	20000034 	.word	0x20000034
 8000550:	20000036 	.word	0x20000036
 8000554:	20000170 	.word	0x20000170
 8000558:	20000038 	.word	0x20000038
 800055c:	2000003a 	.word	0x2000003a

08000560 <RobotCtr_Processor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RobotCtr_Processor */
void RobotCtr_Processor(void *argument)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b089      	sub	sp, #36	@ 0x24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN RobotCtr_Processor */

  // eMotor_taskState eState = MOTOR_INIT;
	smsQ_buff_pid smsQ_PIDspeed = {0,0};
 8000568:	2300      	movs	r3, #0
 800056a:	833b      	strh	r3, [r7, #24]
 800056c:	2300      	movs	r3, #0
 800056e:	837b      	strh	r3, [r7, #26]
	eMotor_dir dir_old = FOWARD;
 8000570:	2301      	movs	r3, #1
 8000572:	77fb      	strb	r3, [r7, #31]

//	int16_t speed_m1_old_dis = 0;
  /* Infinite loop */
  for(;;)
  {
		switch (eState) {
 8000574:	4b56      	ldr	r3, [pc, #344]	@ (80006d0 <RobotCtr_Processor+0x170>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b51      	cmp	r3, #81	@ 0x51
 800057a:	f000 8082 	beq.w	8000682 <RobotCtr_Processor+0x122>
 800057e:	2b51      	cmp	r3, #81	@ 0x51
 8000580:	dcf8      	bgt.n	8000574 <RobotCtr_Processor+0x14>
 8000582:	2b50      	cmp	r3, #80	@ 0x50
 8000584:	d074      	beq.n	8000670 <RobotCtr_Processor+0x110>
 8000586:	2b50      	cmp	r3, #80	@ 0x50
 8000588:	dcf4      	bgt.n	8000574 <RobotCtr_Processor+0x14>
 800058a:	2b15      	cmp	r3, #21
 800058c:	dc32      	bgt.n	80005f4 <RobotCtr_Processor+0x94>
 800058e:	2b00      	cmp	r3, #0
 8000590:	dbf0      	blt.n	8000574 <RobotCtr_Processor+0x14>
 8000592:	2b15      	cmp	r3, #21
 8000594:	d8ee      	bhi.n	8000574 <RobotCtr_Processor+0x14>
 8000596:	a201      	add	r2, pc, #4	@ (adr r2, 800059c <RobotCtr_Processor+0x3c>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	0800063b 	.word	0x0800063b
 80005a0:	080005fb 	.word	0x080005fb
 80005a4:	08000575 	.word	0x08000575
 80005a8:	08000575 	.word	0x08000575
 80005ac:	08000575 	.word	0x08000575
 80005b0:	0800065f 	.word	0x0800065f
 80005b4:	08000575 	.word	0x08000575
 80005b8:	08000575 	.word	0x08000575
 80005bc:	08000575 	.word	0x08000575
 80005c0:	08000575 	.word	0x08000575
 80005c4:	08000575 	.word	0x08000575
 80005c8:	08000575 	.word	0x08000575
 80005cc:	08000575 	.word	0x08000575
 80005d0:	08000575 	.word	0x08000575
 80005d4:	08000575 	.word	0x08000575
 80005d8:	08000575 	.word	0x08000575
 80005dc:	08000575 	.word	0x08000575
 80005e0:	08000575 	.word	0x08000575
 80005e4:	08000575 	.word	0x08000575
 80005e8:	08000575 	.word	0x08000575
 80005ec:	080006bb 	.word	0x080006bb
 80005f0:	080006c3 	.word	0x080006c3
 80005f4:	2b41      	cmp	r3, #65	@ 0x41
 80005f6:	d05c      	beq.n	80006b2 <RobotCtr_Processor+0x152>
 80005f8:	e7bc      	b.n	8000574 <RobotCtr_Processor+0x14>
			case MOTOR_INIT:
				motor1_manager = MOTOR_Contr_Init(&htim4, TIM_CHANNEL_2);
 80005fa:	4c36      	ldr	r4, [pc, #216]	@ (80006d4 <RobotCtr_Processor+0x174>)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2204      	movs	r2, #4
 8000600:	4935      	ldr	r1, [pc, #212]	@ (80006d8 <RobotCtr_Processor+0x178>)
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fa6f 	bl	8000ae6 <MOTOR_Contr_Init>
 8000608:	463b      	mov	r3, r7
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				motor2_manager = MOTOR_Contr_Init(&htim4, TIM_CHANNEL_1);
 8000610:	4c32      	ldr	r4, [pc, #200]	@ (80006dc <RobotCtr_Processor+0x17c>)
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	4930      	ldr	r1, [pc, #192]	@ (80006d8 <RobotCtr_Processor+0x178>)
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fa64 	bl	8000ae6 <MOTOR_Contr_Init>
 800061e:	463b      	mov	r3, r7
 8000620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				motor1_manager.id_motor = 1;
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <RobotCtr_Processor+0x174>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
				motor2_manager.id_motor = 2;
 800062c:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <RobotCtr_Processor+0x17c>)
 800062e:	2202      	movs	r2, #2
 8000630:	701a      	strb	r2, [r3, #0]

				eState = MOTOR_IDLE;
 8000632:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <RobotCtr_Processor+0x170>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
				break;
 8000638:	e048      	b.n	80006cc <RobotCtr_Processor+0x16c>
/*-----------------------------------------------------------*/
			case MOTOR_IDLE:
				// eState = eState_old;
				// Trạng thái Idle có thể được thực hiện dòng lệnh ch�?  Queue, flag,..
				// Ch�? lệnh để quyết định rẽ hay đi thẳng
				  if(osOK != osMessageQueueGet(smsQ_CtrMHandle, &smsQ_ctrM_buff, 0, osWaitForever))
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <RobotCtr_Processor+0x180>)
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	2200      	movs	r2, #0
 8000644:	4927      	ldr	r1, [pc, #156]	@ (80006e4 <RobotCtr_Processor+0x184>)
 8000646:	f004 ffbf 	bl	80055c8 <osMessageQueueGet>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <RobotCtr_Processor+0xf4>
				  {
					  __NOP();
 8000650:	bf00      	nop
				  }
				  else
				  {
					  eState = smsQ_ctrM_buff.estate;
				  }
				break;
 8000652:	e03b      	b.n	80006cc <RobotCtr_Processor+0x16c>
					  eState = smsQ_ctrM_buff.estate;
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <RobotCtr_Processor+0x184>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <RobotCtr_Processor+0x170>)
 800065a:	701a      	strb	r2, [r3, #0]
				break;
 800065c:	e036      	b.n	80006cc <RobotCtr_Processor+0x16c>

/*-----------------------------------------------------------*/
			// Forward or Back -> Driving
			case MOTOR_DRIVE_FORWARD:
				// doi chieu dung co => return 0 speed de dao chieu dong co
				if(dir_old == BACK)
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <RobotCtr_Processor+0x108>
//					motor2_manager.speed = 0;
//					MOTOR_rotation(motor1_manager, 0);
//					MOTOR_rotation(motor2_manager, 0);

					// returned 0
					dir_old = FOWARD;
 8000664:	2301      	movs	r3, #1
 8000666:	77fb      	strb	r3, [r7, #31]
				}
				eState = MOTOR_DRIVING;
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <RobotCtr_Processor+0x170>)
 800066a:	2251      	movs	r2, #81	@ 0x51
 800066c:	701a      	strb	r2, [r3, #0]
				break;
 800066e:	e02d      	b.n	80006cc <RobotCtr_Processor+0x16c>
			case MOTOR_DRIVE_BACK:
				// doi chieu dung co => return 0 speed de dao chieu dong co
				if(dir_old == FOWARD)
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d101      	bne.n	800067a <RobotCtr_Processor+0x11a>
//					motor2_manager.speed = 0;
//					MOTOR_rotation(motor1_manager, 0);
//					MOTOR_rotation(motor2_manager, 0);

					// returned 0
					dir_old = BACK;
 8000676:	2300      	movs	r3, #0
 8000678:	77fb      	strb	r3, [r7, #31]
				}
				eState = MOTOR_DRIVING;
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <RobotCtr_Processor+0x170>)
 800067c:	2251      	movs	r2, #81	@ 0x51
 800067e:	701a      	strb	r2, [r3, #0]
				break;
 8000680:	e024      	b.n	80006cc <RobotCtr_Processor+0x16c>
				// PID trien khai

				// smsQ_ctrM_buff 	: toc do mong muon
				// smsQ_PIDspeed 	: toc do truyen pid - ctr motor

				smsQ_PIDspeed.speed_disM1 = smsQ_ctrM_buff.speed_right;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <RobotCtr_Processor+0x184>)
 8000684:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000688:	833b      	strh	r3, [r7, #24]
				smsQ_PIDspeed.speed_disM2 = smsQ_ctrM_buff.speed_left;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <RobotCtr_Processor+0x184>)
 800068c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000690:	837b      	strh	r3, [r7, #26]

				if(osOK != osMessageQueuePut(smsQ_PIDVelHandle, &smsQ_PIDspeed , 0, 0))
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <RobotCtr_Processor+0x188>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	f107 0118 	add.w	r1, r7, #24
 800069a:	2300      	movs	r3, #0
 800069c:	2200      	movs	r2, #0
 800069e:	f004 ff1f 	bl	80054e0 <osMessageQueuePut>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <RobotCtr_Processor+0x14a>
				  __NOP();
 80006a8:	bf00      	nop

				eState = MOTOR_IDLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <RobotCtr_Processor+0x170>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

					eState = MOTOR_IDLE;
				}
				speed_m1_old_dis = smsQ_PIDspeed.speed_disM1;
#endif
				break;
 80006b0:	e00c      	b.n	80006cc <RobotCtr_Processor+0x16c>

/*-----------------------------------------------------------*/
			// Turn left or right -> Turnning
			case MOTOR_TURN_LEFT:

				eState = MOTOR_TURNNING;
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <RobotCtr_Processor+0x170>)
 80006b4:	2215      	movs	r2, #21
 80006b6:	701a      	strb	r2, [r3, #0]
				break;
 80006b8:	e008      	b.n	80006cc <RobotCtr_Processor+0x16c>
			case MOTOR_TURN_RIGHT:

				eState = MOTOR_TURNNING;
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <RobotCtr_Processor+0x170>)
 80006bc:	2215      	movs	r2, #21
 80006be:	701a      	strb	r2, [r3, #0]
				break;
 80006c0:	e004      	b.n	80006cc <RobotCtr_Processor+0x16c>
			// Turnning
			case MOTOR_TURNNING:
				// Robot turning
				eState = MOTOR_IDLE;
 80006c2:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <RobotCtr_Processor+0x170>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				break;
 80006c8:	bf00      	nop
 80006ca:	e753      	b.n	8000574 <RobotCtr_Processor+0x14>
		switch (eState) {
 80006cc:	e752      	b.n	8000574 <RobotCtr_Processor+0x14>
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000048 	.word	0x20000048
 80006d8:	20000258 	.word	0x20000258
 80006dc:	20000058 	.word	0x20000058
 80006e0:	20000160 	.word	0x20000160
 80006e4:	20000040 	.word	0x20000040
 80006e8:	2000016c 	.word	0x2000016c

080006ec <PIDCtr_Processor>:

smsQ_buff_pid smsQ_PIDspeed;

/* USER CODE END Header_PIDCtr_Processor */
void PIDCtr_Processor(void *argument)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b0b4      	sub	sp, #208	@ 0xd0
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6378      	str	r0, [r7, #52]	@ 0x34
  /* USER CODE BEGIN PIDCtr_Processor */
	ePID_taskState estate = PID_INIT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	move_aver_instance_int16 fillter_pid_M1;
	move_aver_instance_int16 fillter_pid_M2;

	// smsQ_buff_motor smsQ_ctrM;

	int16_t ret_m1 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
	int16_t ret_m2 = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2

  /* Infinite loop */
  for(;;)
  {
	  switch (estate)
 8000706:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800070a:	2b02      	cmp	r3, #2
 800070c:	d072      	beq.n	80007f4 <PIDCtr_Processor+0x108>
 800070e:	2b02      	cmp	r3, #2
 8000710:	dcf9      	bgt.n	8000706 <PIDCtr_Processor+0x1a>
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <PIDCtr_Processor+0x30>
 8000716:	2b01      	cmp	r3, #1
 8000718:	d056      	beq.n	80007c8 <PIDCtr_Processor+0xdc>
 800071a:	e7f4      	b.n	8000706 <PIDCtr_Processor+0x1a>
	  {
	  	  case PID_INIT:
	  		  // time pend wait periperal timer init
	  		  osDelay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000720:	f004 fce2 	bl	80050e8 <osDelay>

	  		  pid_manager_motor1 = set_pid_gain(4, 20, 0.2, H_DISC_CONSTA);
 8000724:	4c5d      	ldr	r4, [pc, #372]	@ (800089c <PIDCtr_Processor+0x1b0>)
 8000726:	463b      	mov	r3, r7
 8000728:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 80008a0 <PIDCtr_Processor+0x1b4>
 800072c:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 80008a4 <PIDCtr_Processor+0x1b8>
 8000730:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000734:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb65 	bl	8000e08 <set_pid_gain>
 800073e:	4625      	mov	r5, r4
 8000740:	463c      	mov	r4, r7
 8000742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800074e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  		  PID_ctrlInit(&pid_manager_motor1, 0, speed_db_l_fill);
 8000752:	4b55      	ldr	r3, [pc, #340]	@ (80008a8 <PIDCtr_Processor+0x1bc>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	461a      	mov	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	484f      	ldr	r0, [pc, #316]	@ (800089c <PIDCtr_Processor+0x1b0>)
 800075e:	f000 fbff 	bl	8000f60 <PID_ctrlInit>

	  		  pid_manager_motor2 = set_pid_gain(4, 20, 0.2, H_DISC_CONSTA);
 8000762:	4c52      	ldr	r4, [pc, #328]	@ (80008ac <PIDCtr_Processor+0x1c0>)
 8000764:	463b      	mov	r3, r7
 8000766:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 80008a0 <PIDCtr_Processor+0x1b4>
 800076a:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 80008a4 <PIDCtr_Processor+0x1b8>
 800076e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000772:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fb46 	bl	8000e08 <set_pid_gain>
 800077c:	4625      	mov	r5, r4
 800077e:	463c      	mov	r4, r7
 8000780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000788:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800078c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  		  PID_ctrlInit(&pid_manager_motor2, 0, speed_db_r_fill);
 8000790:	4b47      	ldr	r3, [pc, #284]	@ (80008b0 <PIDCtr_Processor+0x1c4>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	4844      	ldr	r0, [pc, #272]	@ (80008ac <PIDCtr_Processor+0x1c0>)
 800079c:	f000 fbe0 	bl	8000f60 <PID_ctrlInit>

	  		  Average_filter_reset(&fillter_pid_M1);
 80007a0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 facd 	bl	8000d44 <Average_filter_reset>
	  		  Average_filter_reset(&fillter_pid_M2);
 80007aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fac8 	bl	8000d44 <Average_filter_reset>

	  		  PID_updateComp(&pid_manager_motor1);
 80007b4:	4839      	ldr	r0, [pc, #228]	@ (800089c <PIDCtr_Processor+0x1b0>)
 80007b6:	f000 fb90 	bl	8000eda <PID_updateComp>
	  		  PID_updateComp(&pid_manager_motor2);
 80007ba:	483c      	ldr	r0, [pc, #240]	@ (80008ac <PIDCtr_Processor+0x1c0>)
 80007bc:	f000 fb8d 	bl	8000eda <PID_updateComp>

	  		  estate = PID_IDLE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	  		  break;
 80007c6:	e068      	b.n	800089a <PIDCtr_Processor+0x1ae>

	  	  case PID_IDLE:
			  if(osOK != osMessageQueueGet(smsQ_PIDVelHandle, &smsQ_PIDspeed, 0, TIME_SAMPLE))
 80007c8:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <PIDCtr_Processor+0x1c8>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2200      	movs	r2, #0
 80007d0:	4939      	ldr	r1, [pc, #228]	@ (80008b8 <PIDCtr_Processor+0x1cc>)
 80007d2:	f004 fef9 	bl	80055c8 <osMessageQueueGet>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <PIDCtr_Processor+0xf4>
			  {
				  __NOP();
 80007dc:	bf00      	nop
 80007de:	e005      	b.n	80007ec <PIDCtr_Processor+0x100>
			  }
			  else
			  {
				  PID_updateComp(&pid_manager_motor1);
 80007e0:	482e      	ldr	r0, [pc, #184]	@ (800089c <PIDCtr_Processor+0x1b0>)
 80007e2:	f000 fb7a 	bl	8000eda <PID_updateComp>
		  		  PID_updateComp(&pid_manager_motor2);
 80007e6:	4831      	ldr	r0, [pc, #196]	@ (80008ac <PIDCtr_Processor+0x1c0>)
 80007e8:	f000 fb77 	bl	8000eda <PID_updateComp>
			  }

	  		  estate = PID_RUN;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	  		  break;
 80007f2:	e052      	b.n	800089a <PIDCtr_Processor+0x1ae>

	  	  case PID_RUN:
	  		  // mutex encoder value
	  		  osMutexAcquire(mutex_encHandle, 100);
 80007f4:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <PIDCtr_Processor+0x1d0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2164      	movs	r1, #100	@ 0x64
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fd3c 	bl	8005278 <osMutexAcquire>
	  		  ret_m1 = PID_compute_ctrl_action(
	  				  &pid_manager_motor1, smsQ_PIDspeed.speed_disM1, speed_db_r_fill);
 8000800:	4b2d      	ldr	r3, [pc, #180]	@ (80008b8 <PIDCtr_Processor+0x1cc>)
 8000802:	f9b3 3000 	ldrsh.w	r3, [r3]
	  		  ret_m1 = PID_compute_ctrl_action(
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <PIDCtr_Processor+0x1c4>)
 800080a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800080e:	4619      	mov	r1, r3
 8000810:	4822      	ldr	r0, [pc, #136]	@ (800089c <PIDCtr_Processor+0x1b0>)
 8000812:	f000 fbc7 	bl	8000fa4 <PID_compute_ctrl_action>
 8000816:	4603      	mov	r3, r0
 8000818:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

			  // mutex
	  		  ret_m2 = PID_compute_ctrl_action(
	  				  &pid_manager_motor2, smsQ_PIDspeed.speed_disM2, speed_db_l_fill);
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <PIDCtr_Processor+0x1cc>)
 800081e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  		  ret_m2 = PID_compute_ctrl_action(
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4a20      	ldr	r2, [pc, #128]	@ (80008a8 <PIDCtr_Processor+0x1bc>)
 8000826:	f9b2 2000 	ldrsh.w	r2, [r2]
 800082a:	4619      	mov	r1, r3
 800082c:	481f      	ldr	r0, [pc, #124]	@ (80008ac <PIDCtr_Processor+0x1c0>)
 800082e:	f000 fbb9 	bl	8000fa4 <PID_compute_ctrl_action>
 8000832:	4603      	mov	r3, r0
 8000834:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
	  		  osMutexRelease(mutex_encHandle);
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <PIDCtr_Processor+0x1d0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fd79 	bl	8005334 <osMutexRelease>

#if USE_FILL

	  		  motor1_manager.speed = Average_filter_apply(&fillter_pid_M1, ret_m1);
 8000842:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	@ 0xc4
 8000846:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fa9b 	bl	8000d88 <Average_filter_apply>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <PIDCtr_Processor+0x1d4>)
 8000858:	819a      	strh	r2, [r3, #12]
	  		  motor2_manager.speed = Average_filter_apply(&fillter_pid_M2, ret_m2);
 800085a:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	@ 0xc2
 800085e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fa8f 	bl	8000d88 <Average_filter_apply>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <PIDCtr_Processor+0x1d8>)
 8000870:	819a      	strh	r2, [r3, #12]
#else
	  		motor1_manager.speed = ret_m1;
#endif

	  		  // CTR
	  		  MOTOR_rotation(motor2_manager, smsQ_PIDspeed.speed_disM2);
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <PIDCtr_Processor+0x1cc>)
 8000874:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <PIDCtr_Processor+0x1d8>)
 800087a:	9200      	str	r2, [sp, #0]
 800087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087e:	f000 f955 	bl	8000b2c <MOTOR_rotation>
	  		  MOTOR_rotation(motor1_manager, smsQ_PIDspeed.speed_disM1);
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <PIDCtr_Processor+0x1cc>)
 8000884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <PIDCtr_Processor+0x1d4>)
 800088a:	9200      	str	r2, [sp, #0]
 800088c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088e:	f000 f94d 	bl	8000b2c <MOTOR_rotation>

	  		  estate = PID_IDLE;
 8000892:	2301      	movs	r3, #1
 8000894:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	  		  break;
 8000898:	bf00      	nop
	  switch (estate)
 800089a:	e734      	b.n	8000706 <PIDCtr_Processor+0x1a>
 800089c:	20000068 	.word	0x20000068
 80008a0:	3b03126f 	.word	0x3b03126f
 80008a4:	3e4ccccd 	.word	0x3e4ccccd
 80008a8:	2000003a 	.word	0x2000003a
 80008ac:	20000098 	.word	0x20000098
 80008b0:	20000038 	.word	0x20000038
 80008b4:	2000016c 	.word	0x2000016c
 80008b8:	200000c8 	.word	0x200000c8
 80008bc:	20000170 	.word	0x20000170
 80008c0:	20000048 	.word	0x20000048
 80008c4:	20000058 	.word	0x20000058

080008c8 <ReLog_prs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReLog_prs */
void ReLog_prs(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReLog_prs */
	uint8_t arr[MAXLOG] = {0};
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	2300      	movs	r3, #0
 80008d6:	733b      	strb	r3, [r7, #12]
//
//	  sprintf(arr, "%d", motor1_manager.speed);
//
//	  HAL_UART_Transmit(&huart1, arr, strlen(arr), 100);

	  osDelay(200);
 80008d8:	20c8      	movs	r0, #200	@ 0xc8
 80008da:	f004 fc05 	bl	80050e8 <osDelay>
 80008de:	e7fb      	b.n	80008d8 <ReLog_prs+0x10>

080008e0 <ENC_Init>:
  * @param		tim_E1: htime encoder tren motor 1
  * @param		tim_E2: htime encoder tren motor 2
  * @retval
  */
void ENC_Init(TIM_HandleTypeDef *tim_E1, TIM_HandleTypeDef *tim_E2)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	enc_instance_M1.tim_enc = tim_E1;
 80008ea:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <ENC_Init+0x24>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6153      	str	r3, [r2, #20]
	enc_instance_M2.tim_enc = tim_E2;
 80008f0:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <ENC_Init+0x28>)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	6153      	str	r3, [r2, #20]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	200000d0 	.word	0x200000d0
 8000908:	200000e8 	.word	0x200000e8

0800090c <ENCM_Handl>:
  * @brief		pulse/s -> rpm
  * @param
  * @retval
  */
encoder_user_t* ENCM_Handl(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	};
	// Encoder debug varriables

	// Motor 1
	// Nhan lai encoder de tinh velocity
	enc_user_M[0].count_enc = __HAL_TIM_GET_COUNTER(enc_instance_M1.tim_enc);
 8000910:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <ENCM_Handl+0x88>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <ENCM_Handl+0x8c>)
 800091c:	811a      	strh	r2, [r3, #8]
	update_encoder(&enc_instance_M1, enc_instance_M1.tim_enc);
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <ENCM_Handl+0x88>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	@ (8000994 <ENCM_Handl+0x88>)
 8000926:	f000 f83b 	bl	80009a0 <update_encoder>
	enc_user_M[0].enc_pos = enc_instance_M1.position;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <ENCM_Handl+0x88>)
 800092c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <ENCM_Handl+0x8c>)
 8000932:	605a      	str	r2, [r3, #4]
	// Van toc (rpm)
	enc_user_M[0].enc_vel = calculator_enc_rpm(enc_instance_M1.velocity, SAMP_TIME_EXP_MIN1, ENC_PULSE);
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <ENCM_Handl+0x88>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	f44f 721a 	mov.w	r2, #616	@ 0x268
 800093e:	2164      	movs	r1, #100	@ 0x64
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8b1 	bl	8000aa8 <calculator_enc_rpm>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <ENCM_Handl+0x8c>)
 800094c:	801a      	strh	r2, [r3, #0]

	// Motor 2
	// Nhan lai encoder de tinh velocity
	enc_user_M[1].count_enc = __HAL_TIM_GET_COUNTER(enc_instance_M2.tim_enc);
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <ENCM_Handl+0x90>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <ENCM_Handl+0x8c>)
 800095a:	829a      	strh	r2, [r3, #20]
	update_encoder(&enc_instance_M2, enc_instance_M2.tim_enc);
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <ENCM_Handl+0x90>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4619      	mov	r1, r3
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <ENCM_Handl+0x90>)
 8000964:	f000 f81c 	bl	80009a0 <update_encoder>
	enc_user_M[1].enc_pos = enc_instance_M2.position;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <ENCM_Handl+0x90>)
 800096a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <ENCM_Handl+0x8c>)
 8000970:	611a      	str	r2, [r3, #16]
	// Van toc (rpm)
	enc_user_M[1].enc_vel = calculator_enc_rpm(enc_instance_M2.velocity, SAMP_TIME_EXP_MIN1, ENC_PULSE);
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <ENCM_Handl+0x90>)
 8000974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000978:	f44f 721a 	mov.w	r2, #616	@ 0x268
 800097c:	2164      	movs	r1, #100	@ 0x64
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f892 	bl	8000aa8 <calculator_enc_rpm>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <ENCM_Handl+0x8c>)
 800098a:	819a      	strh	r2, [r3, #12]

	return enc_user_M;
 800098c:	4b02      	ldr	r3, [pc, #8]	@ (8000998 <ENCM_Handl+0x8c>)
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000d0 	.word	0x200000d0
 8000998:	20000100 	.word	0x20000100
 800099c:	200000e8 	.word	0x200000e8

080009a0 <update_encoder>:
  * @brief
  * @param
  * @retval
  */
static void update_encoder(encoder_instance_t *encoder_value, TIM_HandleTypeDef *htim)
{
 80009a0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80009a4:	b085      	sub	sp, #20
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b2:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if(!first_time)
 80009b4:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa4 <update_encoder+0x104>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <update_encoder+0x2a>
	{
		encoder_value->velocity = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80009c2:	4b38      	ldr	r3, [pc, #224]	@ (8000aa4 <update_encoder+0x104>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e052      	b.n	8000a70 <update_encoder+0xd0>
		 * GIAI THICH CHI TIET:
		 * -
		 *
		 *
		 * */
		if(temp_counter == encoder_value->last_counter_value)		// Neu couter_gia? = couter_cu~ => Xe dung yen
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d103      	bne.n	80009dc <update_encoder+0x3c>
		{
			encoder_value->velocity = 0;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
 80009da:	e049      	b.n	8000a70 <update_encoder+0xd0>
		}
		else if(temp_counter > encoder_value->last_counter_value)	// Neu couter_gia? > couter_cu~ => Xe chay
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d922      	bls.n	8000a2c <update_encoder+0x8c>
		{
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	2b10      	cmp	r3, #16
 80009f2:	d110      	bne.n	8000a16 <update_encoder+0x76>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_COUNTER(htim) - temp_counter);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	801a      	strh	r2, [r3, #0]
 8000a14:	e02c      	b.n	8000a70 <update_encoder+0xd0>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	e021      	b.n	8000a70 <update_encoder+0xd0>
			}
		}
		else														// Neu couter_gia? <= couter_cu~ => Xe chay nguoc chieu lai
		{
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	2b10      	cmp	r3, #16
 8000a38:	d10a      	bne.n	8000a50 <update_encoder+0xb0>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	801a      	strh	r2, [r3, #0]
 8000a4e:	e00f      	b.n	8000a70 <update_encoder+0xd0>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_COUNTER(htim) - encoder_value->last_counter_value);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	801a      	strh	r2, [r3, #0]
			}
		}
	} /*END else if(first_time)*/
	encoder_value->position += encoder_value ->velocity;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000a7c:	b209      	sxth	r1, r1
 8000a7e:	17c8      	asrs	r0, r1, #31
 8000a80:	460c      	mov	r4, r1
 8000a82:	4605      	mov	r5, r0
 8000a84:	eb12 0804 	adds.w	r8, r2, r4
 8000a88:	eb43 0905 	adc.w	r9, r3, r5
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoder_value->last_counter_value = temp_counter;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	611a      	str	r2, [r3, #16]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000118 	.word	0x20000118

08000aa8 <calculator_enc_rpm>:
  * @param		samplTime_ExpMin1		: 1 / Thời gian lấy mẫu (sec)
  * @param		pulse_enc				: Số xung trên nhãn encoder
  * @retval		rpm						: Số vòng/phút
  */
static int16_t calculator_enc_rpm (int16_t vel_Pul_per_SamplTime, uint8_t samplTime_ExpMin1, uint16_t pulse_enc)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	717b      	strb	r3, [r7, #5]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	807b      	strh	r3, [r7, #2]
	int16_t rpm = 0; // (round/min)
 8000aba:	2300      	movs	r3, #0
 8000abc:	81fb      	strh	r3, [r7, #14]
	// pulse 1 round enc = pulse_enc * 4
	// rpm = (vel_pul_per_sampl_time * 60 * samplTime_ExpMin1) / (4 * pulse_enc)	// (round/min)
	rpm = (vel_Pul_per_SamplTime * 15 * samplTime_ExpMin1) / (pulse_enc);
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	797a      	ldrb	r2, [r7, #5]
 8000ac4:	fb03 f202 	mul.w	r2, r3, r2
 8000ac8:	4613      	mov	r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	1a9a      	subs	r2, r3, r2
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ad4:	81fb      	strh	r3, [r7, #14]
	return rpm;
 8000ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <MOTOR_Contr_Init>:
  * @retval	None
  */
param_motor MOTOR_Contr_Init(
						TIM_HandleTypeDef *M_htim,		\
						uint32_t M_Channel)
{
 8000ae6:	b590      	push	{r4, r7, lr}
 8000ae8:	b089      	sub	sp, #36	@ 0x24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	param_motor M_contr = {0, M_htim, M_Channel};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	61bb      	str	r3, [r7, #24]

    HAL_TIM_PWM_Start(M_contr.htim, M_contr.Channel);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 ffcc 	bl	8003aac <HAL_TIM_PWM_Start>

	return M_contr;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	461c      	mov	r4, r3
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	3724      	adds	r7, #36	@ 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
	...

08000b2c <MOTOR_rotation>:
  * MotorLeft
  */
#define CONTROL_DIR 1

func_state MOTOR_rotation(param_motor motor_param, int16_t speed_dis)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	463c      	mov	r4, r7
 8000b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//check
	if(motor_param.speed > SPEED_MAX)
 8000b38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b40:	dd01      	ble.n	8000b46 <MOTOR_rotation+0x1a>
		return ERR;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e0f7      	b.n	8000d36 <MOTOR_rotation+0x20a>

#if CONTROL_DIR

	if(motor_param.speed >= 0)
 8000b46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db76      	blt.n	8000c3c <MOTOR_rotation+0x110>
	{
		// Quay thuan ma toc do tinh tu pid < 0 => khong chap nhan
		if(speed_dis < 0)
 8000b4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da2c      	bge.n	8000bb0 <MOTOR_rotation+0x84>
		{
			__HAL_TIM_SET_COMPARE(motor_param.htim, motor_param.Channel, 0);
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <MOTOR_rotation+0x3a>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b64:	e0e6      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d104      	bne.n	8000b76 <MOTOR_rotation+0x4a>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b74:	e0de      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d104      	bne.n	8000b86 <MOTOR_rotation+0x5a>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2300      	movs	r3, #0
 8000b82:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b84:	e0d6      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b0c      	cmp	r3, #12
 8000b8a:	d104      	bne.n	8000b96 <MOTOR_rotation+0x6a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2300      	movs	r3, #0
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	e0ce      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b10      	cmp	r3, #16
 8000b9a:	d104      	bne.n	8000ba6 <MOTOR_rotation+0x7a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba4:	e0c6      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bae:	e0c1      	b.n	8000d34 <MOTOR_rotation+0x208>
		}
		else
		{
			if(motor_param.id_motor == 2)
 8000bb0:	783b      	ldrb	r3, [r7, #0]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d105      	bne.n	8000bc2 <MOTOR_rotation+0x96>
				DIR2_FOWARD;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4861      	ldr	r0, [pc, #388]	@ (8000d40 <MOTOR_rotation+0x214>)
 8000bbc:	f001 fb9a 	bl	80022f4 <HAL_GPIO_WritePin>
 8000bc0:	e004      	b.n	8000bcc <MOTOR_rotation+0xa0>
			else
				DIR1_FOWARD;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	485e      	ldr	r0, [pc, #376]	@ (8000d40 <MOTOR_rotation+0x214>)
 8000bc8:	f001 fb94 	bl	80022f4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(motor_param.htim, motor_param.Channel, motor_param.speed);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d105      	bne.n	8000bde <MOTOR_rotation+0xb2>
 8000bd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bdc:	e0aa      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d106      	bne.n	8000bf2 <MOTOR_rotation+0xc6>
 8000be4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	460b      	mov	r3, r1
 8000bee:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bf0:	e0a0      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d106      	bne.n	8000c06 <MOTOR_rotation+0xda>
 8000bf8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	460b      	mov	r3, r1
 8000c02:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c04:	e096      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b0c      	cmp	r3, #12
 8000c0a:	d106      	bne.n	8000c1a <MOTOR_rotation+0xee>
 8000c0c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	460b      	mov	r3, r1
 8000c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c18:	e08c      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b10      	cmp	r3, #16
 8000c1e:	d106      	bne.n	8000c2e <MOTOR_rotation+0x102>
 8000c20:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c2c:	e082      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c2e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	460b      	mov	r3, r1
 8000c38:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c3a:	e07b      	b.n	8000d34 <MOTOR_rotation+0x208>
		}
	}
	else
	{
		// Quay thuan ma toc do tinh tu pid > 0 => khong chap nhan
		if(speed_dis >= 0)
 8000c3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db2c      	blt.n	8000c9e <MOTOR_rotation+0x172>
		{
			__HAL_TIM_SET_COMPARE(motor_param.htim, motor_param.Channel, 0);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <MOTOR_rotation+0x128>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c52:	e06f      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d104      	bne.n	8000c64 <MOTOR_rotation+0x138>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c62:	e067      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d104      	bne.n	8000c74 <MOTOR_rotation+0x148>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c72:	e05f      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	d104      	bne.n	8000c84 <MOTOR_rotation+0x158>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	e057      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b10      	cmp	r3, #16
 8000c88:	d104      	bne.n	8000c94 <MOTOR_rotation+0x168>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	e04f      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c9c:	e04a      	b.n	8000d34 <MOTOR_rotation+0x208>
		}
		else
		{
			if(motor_param.id_motor == 2)
 8000c9e:	783b      	ldrb	r3, [r7, #0]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d105      	bne.n	8000cb0 <MOTOR_rotation+0x184>
				DIR2_BACK;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4825      	ldr	r0, [pc, #148]	@ (8000d40 <MOTOR_rotation+0x214>)
 8000caa:	f001 fb23 	bl	80022f4 <HAL_GPIO_WritePin>
 8000cae:	e004      	b.n	8000cba <MOTOR_rotation+0x18e>
			else
				DIR1_BACK;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <MOTOR_rotation+0x214>)
 8000cb6:	f001 fb1d 	bl	80022f4 <HAL_GPIO_WritePin>

			__HAL_TIM_SET_COMPARE(motor_param.htim, motor_param.Channel, - motor_param.speed);
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d106      	bne.n	8000cce <MOTOR_rotation+0x1a2>
 8000cc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cc4:	425a      	negs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ccc:	e032      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d107      	bne.n	8000ce4 <MOTOR_rotation+0x1b8>
 8000cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd8:	4259      	negs	r1, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ce2:	e027      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d107      	bne.n	8000cfa <MOTOR_rotation+0x1ce>
 8000cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cee:	4259      	negs	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cf8:	e01c      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b0c      	cmp	r3, #12
 8000cfe:	d107      	bne.n	8000d10 <MOTOR_rotation+0x1e4>
 8000d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d04:	4259      	negs	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	e011      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2b10      	cmp	r3, #16
 8000d14:	d107      	bne.n	8000d26 <MOTOR_rotation+0x1fa>
 8000d16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d1a:	4259      	negs	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	460b      	mov	r3, r1
 8000d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d24:	e006      	b.n	8000d34 <MOTOR_rotation+0x208>
 8000d26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d2a:	4259      	negs	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	460b      	mov	r3, r1
 8000d32:	65d3      	str	r3, [r2, #92]	@ 0x5c
		}
	}
#endif

	return OKE;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	48000400 	.word	0x48000400

08000d44 <Average_filter_reset>:
 *      Author: BaoThuan
 */
#include <moving_average_int_16.h>

void Average_filter_reset(move_aver_instance_int16* instance)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	instance->counter = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
	instance->sum = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	641a      	str	r2, [r3, #64]	@ 0x40
	instance->out = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
	for(int i = 0; i < MOVING_AVEGE_LENGTH; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e007      	b.n	8000d74 <Average_filter_reset+0x30>
	{
		instance->bufffer[i] = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < MOVING_AVEGE_LENGTH; i++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b1d      	cmp	r3, #29
 8000d78:	ddf4      	ble.n	8000d64 <Average_filter_reset+0x20>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <Average_filter_apply>:

int16_t Average_filter_apply(move_aver_instance_int16* instance, int16_t input)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
	instance->sum += input - instance->bufffer[instance->counter];
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8000da0:	4608      	mov	r0, r1
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	441a      	add	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	641a      	str	r2, [r3, #64]	@ 0x40
	instance->bufffer[instance->counter] = input;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000db4:	4619      	mov	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	887a      	ldrh	r2, [r7, #2]
 8000dba:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	instance->counter++;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
	if(instance->counter == MOVING_AVEGE_LENGTH)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000dce:	2b1e      	cmp	r3, #30
 8000dd0:	d102      	bne.n	8000dd8 <Average_filter_apply+0x50>
	{
		instance->counter = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	}
	instance->out = instance->sum / MOVING_AVEGE_LENGTH;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <Average_filter_apply+0x7c>)
 8000dde:	fb82 1203 	smull	r1, r2, r2, r3
 8000de2:	441a      	add	r2, r3
 8000de4:	1112      	asrs	r2, r2, #4
 8000de6:	17db      	asrs	r3, r3, #31
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
	// normalizition
	return instance->out;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	88888889 	.word	0x88888889

08000e08 <set_pid_gain>:
  * @brief	Cài đặt thông số độ lợi PID
  * @param	pid_instance	: Địa chỉ tới biến struct chứa thông số pid cần thiết cho tính toán
  * @retval
  */
pid_instance_int16 set_pid_gain(float ep, float ei, float ed, float delayP)
{
 8000e08:	b4b0      	push	{r4, r5, r7}
 8000e0a:	b093      	sub	sp, #76	@ 0x4c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6178      	str	r0, [r7, #20]
 8000e10:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e14:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e18:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e1c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid_instance_int16 pid_instance =
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	623b      	str	r3, [r7, #32]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	647b      	str	r3, [r7, #68]	@ 0x44
			{ep, ei, ed},
			{delayP, 0.0, 0.0, 0.0, 0.0, 0.0},
			{0, 0, 0},
	};

	pid_instance.comp.a1 = 	pid_instance.gain.p + pid_instance.gain.i* pid_instance.disc.h 							\
 8000e60:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e70:	ee37 7a27 	vadd.f32	s14, s14, s15
							+  pid_instance.gain.d / pid_instance.disc.h;
 8000e74:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e78:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000e7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e80:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance.comp.a1 = 	pid_instance.gain.p + pid_instance.gain.i* pid_instance.disc.h 							\
 8000e84:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	pid_instance.comp.a2 = -( pid_instance.gain.p + 2* pid_instance.gain.d / pid_instance.disc.h);
 8000e88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e90:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000e94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000e98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	eef1 7a67 	vneg.f32	s15, s15
 8000ea4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	pid_instance.comp.a3 =  pid_instance.gain.d / pid_instance.disc.h;
 8000ea8:	edd7 6a08 	vldr	s13, [r7, #32]
 8000eac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	return pid_instance;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	461d      	mov	r5, r3
 8000ebc:	f107 0418 	add.w	r4, r7, #24
 8000ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ecc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	374c      	adds	r7, #76	@ 0x4c
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bcb0      	pop	{r4, r5, r7}
 8000ed8:	4770      	bx	lr

08000eda <PID_updateComp>:

void PID_updateComp(pid_instance_int16* pid_instance)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	pid_instance->comp.a1 = 	pid_instance->gain.p + pid_instance->gain.i* pid_instance->disc.h 							\
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	ed93 7a00 	vldr	s14, [r3]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 6a01 	vldr	s13, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
							+  pid_instance->gain.d / pid_instance->disc.h;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	ed93 6a02 	vldr	s12, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f08:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance->comp.a1 = 	pid_instance->gain.p + pid_instance->gain.i* pid_instance->disc.h 							\
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid_instance->comp.a2 = -( pid_instance->gain.p + 2* pid_instance->gain.d / pid_instance->disc.h);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	ed93 7a00 	vldr	s14, [r3]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f22:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f2c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f34:	eef1 7a67 	vneg.f32	s15, s15
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	pid_instance->comp.a3 =  pid_instance->gain.d / pid_instance->disc.h;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <PID_ctrlInit>:


void PID_ctrlInit (pid_instance_int16* pid_instance, uint8_t dSpeed, int16_t speed_measure)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	803b      	strh	r3, [r7, #0]
	pid_instance->disc.errK = dSpeed - speed_measure;
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	edc3 7a04 	vstr	s15, [r3, #16]
	pid_instance->disc.errKm1 = pid_instance->disc.errK;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	615a      	str	r2, [r3, #20]
	pid_instance->disc.errKm2 = pid_instance->disc.errK;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <PID_compute_ctrl_action>:

int16_t PID_compute_ctrl_action (pid_instance_int16* pid_instance, uint8_t dSpeed, int16_t speed_measure)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	803b      	strh	r3, [r7, #0]
	pid_instance->disc.errK = dSpeed - speed_measure;	// > 0 tang toc
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edc3 7a04 	vstr	s15, [r3, #16]

	if(abs(pid_instance->disc.errK) < 3.0)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	f113 0f02 	cmn.w	r3, #2
 8000fdc:	db11      	blt.n	8001002 <PID_compute_ctrl_action+0x5e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe8:	ee17 3a90 	vmov	r3, s15
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	dc08      	bgt.n	8001002 <PID_compute_ctrl_action+0x5e>
	{
		return pid_instance->disc.ctlKm1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	e06b      	b.n	80010da <PID_compute_ctrl_action+0x136>
		// pid_instance->disc.ctlK = 0;
	}
	else
	{
			pid_instance->disc.ctlK = 	(pid_instance->disc.ctlKm1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	ed93 7a08 	vldr	s14, [r3, #32]
										+ pid_instance->comp.a1 * pid_instance->disc.errK
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edd3 7a04 	vldr	s15, [r3, #16]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee37 7a27 	vadd.f32	s14, s14, s15
										+ pid_instance->comp.a2 * pid_instance->disc.errKm1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edd3 7a05 	vldr	s15, [r3, #20]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee37 7a27 	vadd.f32	s14, s14, s15
										+ pid_instance->comp.a3 * pid_instance->disc.errKm2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 7a06 	vldr	s15, [r3, #24]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_instance->disc.ctlK = 	(pid_instance->disc.ctlKm1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	if(pid_instance->disc.ctlK > SPEED_MAX)		// tăng tốc
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001050:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80010e8 <PID_compute_ctrl_action+0x144>
 8001054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	dd0f      	ble.n	800107e <PID_compute_ctrl_action+0xda>
	{
		if(pid_instance->disc.errK > 0)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 7a04 	vldr	s15, [r3, #16]
 8001064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	dd03      	ble.n	8001076 <PID_compute_ctrl_action+0xd2>
		{
			pid_instance->disc.ctlK = SPEED_MAX;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <PID_compute_ctrl_action+0x148>)
 8001072:	61da      	str	r2, [r3, #28]
 8001074:	e003      	b.n	800107e <PID_compute_ctrl_action+0xda>
		}
		else
		{
			pid_instance->disc.ctlK = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
		}
	}

	if(pid_instance->disc.ctlK < -SPEED_MAX)	// giảm tốc
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 7a07 	vldr	s15, [r3, #28]
 8001084:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80010f0 <PID_compute_ctrl_action+0x14c>
 8001088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d50f      	bpl.n	80010b2 <PID_compute_ctrl_action+0x10e>
	{
		if(pid_instance->disc.errK > 0)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 7a04 	vldr	s15, [r3, #16]
 8001098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	dd04      	ble.n	80010ac <PID_compute_ctrl_action+0x108>
		{
			pid_instance->disc.ctlK = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
 80010aa:	e002      	b.n	80010b2 <PID_compute_ctrl_action+0x10e>
		}
		else
		{
			pid_instance->disc.ctlK = -SPEED_MAX;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <PID_compute_ctrl_action+0x150>)
 80010b0:	61da      	str	r2, [r3, #28]
		}
	}


	pid_instance->disc.ctlKm1 = pid_instance->disc.ctlK;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	621a      	str	r2, [r3, #32]
	pid_instance->disc.errKm2 = pid_instance->disc.errKm1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
	pid_instance->disc.errKm1 = pid_instance->disc.errK;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	615a      	str	r2, [r3, #20]

	return (int16_t)pid_instance->disc.ctlK;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	b21b      	sxth	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	447a0000 	.word	0x447a0000
 80010ec:	447a0000 	.word	0x447a0000
 80010f0:	c47a0000 	.word	0xc47a0000
 80010f4:	c47a0000 	.word	0xc47a0000

080010f8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_CAN_Init+0x60>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	@ (800115c <MX_CAN_Init+0x64>)
 8001100:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_CAN_Init+0x60>)
 8001104:	2210      	movs	r2, #16
 8001106:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_CAN_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_CAN_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_CAN_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_CAN_Init+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <MX_CAN_Init+0x60>)
 8001122:	2200      	movs	r2, #0
 8001124:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_CAN_Init+0x60>)
 8001128:	2200      	movs	r2, #0
 800112a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_CAN_Init+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_CAN_Init+0x60>)
 8001134:	2200      	movs	r2, #0
 8001136:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <MX_CAN_Init+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_CAN_Init+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_CAN_Init+0x60>)
 8001146:	f000 fd7d 	bl	8001c44 <HAL_CAN_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001150:	f000 fa3c 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000011c 	.word	0x2000011c
 800115c:	40006400 	.word	0x40006400

08001160 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <HAL_CAN_MspInit+0x7c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d128      	bne.n	80011d4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 8001188:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_CAN_MspInit+0x80>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80011c4:	2309      	movs	r3, #9
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <HAL_CAN_MspInit+0x84>)
 80011d0:	f000 ff16 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40006400 	.word	0x40006400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutex_enc */
  mutex_encHandle = osMutexNew(&mutex_enc_attributes);
 80011ec:	482f      	ldr	r0, [pc, #188]	@ (80012ac <MX_FREERTOS_Init+0xc4>)
 80011ee:	f003 ffa9 	bl	8005144 <osMutexNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a2e      	ldr	r2, [pc, #184]	@ (80012b0 <MX_FREERTOS_Init+0xc8>)
 80011f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of smsQ_CtrM */
  smsQ_CtrMHandle = osMessageQueueNew (16, sizeof(smsQ_buff_motor), &smsQ_CtrM_attributes);
 80011f8:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <MX_FREERTOS_Init+0xcc>)
 80011fa:	2106      	movs	r1, #6
 80011fc:	2010      	movs	r0, #16
 80011fe:	f004 f8e9 	bl	80053d4 <osMessageQueueNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <MX_FREERTOS_Init+0xd0>)
 8001206:	6013      	str	r3, [r2, #0]

  /* creation of smsQ_CtrLED */
  smsQ_CtrLEDHandle = osMessageQueueNew (16, sizeof(smsQ_buff_led), &smsQ_CtrLED_attributes);
 8001208:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <MX_FREERTOS_Init+0xd4>)
 800120a:	2106      	movs	r1, #6
 800120c:	2010      	movs	r0, #16
 800120e:	f004 f8e1 	bl	80053d4 <osMessageQueueNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a2a      	ldr	r2, [pc, #168]	@ (80012c0 <MX_FREERTOS_Init+0xd8>)
 8001216:	6013      	str	r3, [r2, #0]

  /* creation of smsQ_EXTI */
  smsQ_EXTIHandle = osMessageQueueNew (16, sizeof(smsQ_buff_exti), &smsQ_EXTI_attributes);
 8001218:	4a2a      	ldr	r2, [pc, #168]	@ (80012c4 <MX_FREERTOS_Init+0xdc>)
 800121a:	210c      	movs	r1, #12
 800121c:	2010      	movs	r0, #16
 800121e:	f004 f8d9 	bl	80053d4 <osMessageQueueNew>
 8001222:	4603      	mov	r3, r0
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <MX_FREERTOS_Init+0xe0>)
 8001226:	6013      	str	r3, [r2, #0]

  /* creation of smsQ_PIDVel */
  smsQ_PIDVelHandle = osMessageQueueNew (16, sizeof(smsQ_buff_pid), &smsQ_PIDVel_attributes);
 8001228:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <MX_FREERTOS_Init+0xe4>)
 800122a:	2104      	movs	r1, #4
 800122c:	2010      	movs	r0, #16
 800122e:	f004 f8d1 	bl	80053d4 <osMessageQueueNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <MX_FREERTOS_Init+0xe8>)
 8001236:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskEncoder */
  TaskEncoderHandle = osThreadNew(EncoderProcessor, NULL, &TaskEncoder_attributes);
 8001238:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <MX_FREERTOS_Init+0xec>)
 800123a:	2100      	movs	r1, #0
 800123c:	4826      	ldr	r0, [pc, #152]	@ (80012d8 <MX_FREERTOS_Init+0xf0>)
 800123e:	f003 fea9 	bl	8004f94 <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <MX_FREERTOS_Init+0xf4>)
 8001246:	6013      	str	r3, [r2, #0]

  /* creation of TaskRobotCtr */
  TaskRobotCtrHandle = osThreadNew(RobotCtr_Processor, NULL, &TaskRobotCtr_attributes);
 8001248:	4a25      	ldr	r2, [pc, #148]	@ (80012e0 <MX_FREERTOS_Init+0xf8>)
 800124a:	2100      	movs	r1, #0
 800124c:	4825      	ldr	r0, [pc, #148]	@ (80012e4 <MX_FREERTOS_Init+0xfc>)
 800124e:	f003 fea1 	bl	8004f94 <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <MX_FREERTOS_Init+0x100>)
 8001256:	6013      	str	r3, [r2, #0]

  /* creation of TaskLED */
  TaskLEDHandle = osThreadNew(LED_Processor, NULL, &TaskLED_attributes);
 8001258:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <MX_FREERTOS_Init+0x104>)
 800125a:	2100      	movs	r1, #0
 800125c:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <MX_FREERTOS_Init+0x108>)
 800125e:	f003 fe99 	bl	8004f94 <osThreadNew>
 8001262:	4603      	mov	r3, r0
 8001264:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <MX_FREERTOS_Init+0x10c>)
 8001266:	6013      	str	r3, [r2, #0]

  /* creation of Task_PIDCtr */
  Task_PIDCtrHandle = osThreadNew(PIDCtr_Processor, NULL, &Task_PIDCtr_attributes);
 8001268:	4a23      	ldr	r2, [pc, #140]	@ (80012f8 <MX_FREERTOS_Init+0x110>)
 800126a:	2100      	movs	r1, #0
 800126c:	4823      	ldr	r0, [pc, #140]	@ (80012fc <MX_FREERTOS_Init+0x114>)
 800126e:	f003 fe91 	bl	8004f94 <osThreadNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <MX_FREERTOS_Init+0x118>)
 8001276:	6013      	str	r3, [r2, #0]

  /* creation of Task_BtnDebouce */
  Task_BtnDebouceHandle = osThreadNew(BtnDebouce_Prc, NULL, &Task_BtnDebouce_attributes);
 8001278:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <MX_FREERTOS_Init+0x11c>)
 800127a:	2100      	movs	r1, #0
 800127c:	4822      	ldr	r0, [pc, #136]	@ (8001308 <MX_FREERTOS_Init+0x120>)
 800127e:	f003 fe89 	bl	8004f94 <osThreadNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <MX_FREERTOS_Init+0x124>)
 8001286:	6013      	str	r3, [r2, #0]

  /* creation of Task_CANPrs */
  Task_CANPrsHandle = osThreadNew(CANPrs_Process, NULL, &Task_CANPrs_attributes);
 8001288:	4a21      	ldr	r2, [pc, #132]	@ (8001310 <MX_FREERTOS_Init+0x128>)
 800128a:	2100      	movs	r1, #0
 800128c:	4821      	ldr	r0, [pc, #132]	@ (8001314 <MX_FREERTOS_Init+0x12c>)
 800128e:	f003 fe81 	bl	8004f94 <osThreadNew>
 8001292:	4603      	mov	r3, r0
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <MX_FREERTOS_Init+0x130>)
 8001296:	6013      	str	r3, [r2, #0]

  /* creation of Task_ReLog */
  Task_ReLogHandle = osThreadNew(ReLog_prs, NULL, &Task_ReLog_attributes);
 8001298:	4a20      	ldr	r2, [pc, #128]	@ (800131c <MX_FREERTOS_Init+0x134>)
 800129a:	2100      	movs	r1, #0
 800129c:	4820      	ldr	r0, [pc, #128]	@ (8001320 <MX_FREERTOS_Init+0x138>)
 800129e:	f003 fe79 	bl	8004f94 <osThreadNew>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <MX_FREERTOS_Init+0x13c>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	08008940 	.word	0x08008940
 80012b0:	20000170 	.word	0x20000170
 80012b4:	080088e0 	.word	0x080088e0
 80012b8:	20000160 	.word	0x20000160
 80012bc:	080088f8 	.word	0x080088f8
 80012c0:	20000164 	.word	0x20000164
 80012c4:	08008910 	.word	0x08008910
 80012c8:	20000168 	.word	0x20000168
 80012cc:	08008928 	.word	0x08008928
 80012d0:	2000016c 	.word	0x2000016c
 80012d4:	080087e4 	.word	0x080087e4
 80012d8:	08000461 	.word	0x08000461
 80012dc:	20000144 	.word	0x20000144
 80012e0:	08008808 	.word	0x08008808
 80012e4:	08000561 	.word	0x08000561
 80012e8:	20000148 	.word	0x20000148
 80012ec:	0800882c 	.word	0x0800882c
 80012f0:	08000285 	.word	0x08000285
 80012f4:	2000014c 	.word	0x2000014c
 80012f8:	08008850 	.word	0x08008850
 80012fc:	080006ed 	.word	0x080006ed
 8001300:	20000150 	.word	0x20000150
 8001304:	08008874 	.word	0x08008874
 8001308:	080001d1 	.word	0x080001d1
 800130c:	20000154 	.word	0x20000154
 8001310:	08008898 	.word	0x08008898
 8001314:	0800044d 	.word	0x0800044d
 8001318:	20000158 	.word	0x20000158
 800131c:	080088bc 	.word	0x080088bc
 8001320:	080008c9 	.word	0x080008c9
 8001324:	2000015c 	.word	0x2000015c

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b3a      	ldr	r3, [pc, #232]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a39      	ldr	r2, [pc, #228]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b37      	ldr	r3, [pc, #220]	@ (8001428 <MX_GPIO_Init+0x100>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a33      	ldr	r2, [pc, #204]	@ (8001428 <MX_GPIO_Init+0x100>)
 800135c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a2d      	ldr	r2, [pc, #180]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <MX_GPIO_Init+0x100>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a27      	ldr	r2, [pc, #156]	@ (8001428 <MX_GPIO_Init+0x100>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <MX_GPIO_Init+0x100>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D4_Pin|LED_D5_Pin|LED_D6_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a8:	f000 ffa4 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_M2_Pin|DIR_M1_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2130      	movs	r1, #48	@ 0x30
 80013b0:	481e      	ldr	r0, [pc, #120]	@ (800142c <MX_GPIO_Init+0x104>)
 80013b2:	f000 ff9f 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_SW4_Pin|BTN_SW5_Pin|BTN_SW6_Pin;
 80013b6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4818      	ldr	r0, [pc, #96]	@ (8001430 <MX_GPIO_Init+0x108>)
 80013ce:	f000 fe17 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_D4_Pin|LED_D5_Pin|LED_D6_Pin;
 80013d2:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f000 fe07 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_M2_Pin|DIR_M1_Pin;
 80013f2:	2330      	movs	r3, #48	@ 0x30
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <MX_GPIO_Init+0x104>)
 800140a:	f000 fdf9 	bl	8002000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 11, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	210b      	movs	r1, #11
 8001412:	2028      	movs	r0, #40	@ 0x28
 8001414:	f000 fdca 	bl	8001fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001418:	2028      	movs	r0, #40	@ 0x28
 800141a:	f000 fde3 	bl	8001fe4 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800

08001434 <HAL_GPIO_EXTI_Callback>:
  * @brief    Ngắt nút nhấn để Test động cơ thôi
  * @param
  * @retval
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]

	static uint32_t TimeBegin = 0;
	smsQ_buff_exti smsQ_ctr = {idEXTI, 0,0,0};
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	733b      	strb	r3, [r7, #12]

	switch (GPIO_Pin) {
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001454:	d023      	beq.n	800149e <HAL_GPIO_EXTI_Callback+0x6a>
 8001456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800145a:	dc2d      	bgt.n	80014b8 <HAL_GPIO_EXTI_Callback+0x84>
 800145c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001460:	d003      	beq.n	800146a <HAL_GPIO_EXTI_Callback+0x36>
 8001462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_EXTI_Callback+0x50>
 8001468:	e026      	b.n	80014b8 <HAL_GPIO_EXTI_Callback+0x84>
		case(BTN_SW4_Pin):
			smsQ_ctr.state_robot = MOTOR_DRIVE_FORWARD;
 800146a:	2305      	movs	r3, #5
 800146c:	737b      	strb	r3, [r7, #13]
			smsQ_ctr.speed_right = 80;
 800146e:	2350      	movs	r3, #80	@ 0x50
 8001470:	81fb      	strh	r3, [r7, #14]
			smsQ_ctr.speed_left = 80;
 8001472:	2350      	movs	r3, #80	@ 0x50
 8001474:	823b      	strh	r3, [r7, #16]
			// led config time
			smsQ_ctr.time_blink_D4 = 10;
 8001476:	230a      	movs	r3, #10
 8001478:	827b      	strh	r3, [r7, #18]
			smsQ_ctr.time_blink_D5 = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	82bb      	strh	r3, [r7, #20]
			smsQ_ctr.time_blink_D6 = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	82fb      	strh	r3, [r7, #22]
			break;
 8001482:	e01b      	b.n	80014bc <HAL_GPIO_EXTI_Callback+0x88>

		case(BTN_SW5_Pin):
			smsQ_ctr.state_robot = MOTOR_DRIVE_FORWARD;
 8001484:	2305      	movs	r3, #5
 8001486:	737b      	strb	r3, [r7, #13]
			smsQ_ctr.speed_right = 50;
 8001488:	2332      	movs	r3, #50	@ 0x32
 800148a:	81fb      	strh	r3, [r7, #14]
			smsQ_ctr.speed_left = 50;
 800148c:	2332      	movs	r3, #50	@ 0x32
 800148e:	823b      	strh	r3, [r7, #16]
			// led config time
			smsQ_ctr.time_blink_D4 = 5;
 8001490:	2305      	movs	r3, #5
 8001492:	827b      	strh	r3, [r7, #18]
			smsQ_ctr.time_blink_D5 = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	82bb      	strh	r3, [r7, #20]
			smsQ_ctr.time_blink_D6 = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	82fb      	strh	r3, [r7, #22]
			break;
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_EXTI_Callback+0x88>

		case(BTN_SW6_Pin):
			smsQ_ctr.state_robot = MOTOR_DRIVE_FORWARD;
 800149e:	2305      	movs	r3, #5
 80014a0:	737b      	strb	r3, [r7, #13]
			smsQ_ctr.speed_right = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	81fb      	strh	r3, [r7, #14]
			smsQ_ctr.speed_left = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	823b      	strh	r3, [r7, #16]
			// led config time
			smsQ_ctr.time_blink_D4 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	827b      	strh	r3, [r7, #18]
			smsQ_ctr.time_blink_D5 = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	82bb      	strh	r3, [r7, #20]
			smsQ_ctr.time_blink_D6 = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	82fb      	strh	r3, [r7, #22]
			break;
 80014b6:	e001      	b.n	80014bc <HAL_GPIO_EXTI_Callback+0x88>

		default:
			__NOP();
 80014b8:	bf00      	nop
			break;
 80014ba:	bf00      	nop
	}

	if(osOK != osMessageQueuePut(smsQ_EXTIHandle, &smsQ_ctr , 0, 0))
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	2300      	movs	r3, #0
 80014c6:	2200      	movs	r2, #0
 80014c8:	f004 f80a 	bl	80054e0 <osMessageQueuePut>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d000      	beq.n	80014d4 <HAL_GPIO_EXTI_Callback+0xa0>
		__NOP();
 80014d2:	bf00      	nop
	}
	 HAL_Delay(70);

#endif

	EXTI->PR = BTN_SW4_Pin | BTN_SW5_Pin | BTN_SW6_Pin;
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80014d6:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80014da:	615a      	str	r2, [r3, #20]
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000168 	.word	0x20000168
 80014e8:	40010400 	.word	0x40010400

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f0:	f000 fb72 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f812 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f7ff ff16 	bl	8001328 <MX_GPIO_Init>
  MX_CAN_Init();
 80014fc:	f7ff fdfc 	bl	80010f8 <MX_CAN_Init>
  MX_TIM2_Init();
 8001500:	f000 f94a 	bl	8001798 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001504:	f000 f99c 	bl	8001840 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001508:	f000 f9f0 	bl	80018ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800150c:	f003 fcda 	bl	8004ec4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001510:	f7ff fe6a 	bl	80011e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001514:	f003 fd0a 	bl	8004f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <main+0x2c>

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	@ 0x40
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2228      	movs	r2, #40	@ 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f8be 	bl	80086ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800155e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f000 ff0f 	bl	8002388 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001570:	f000 f82c 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f001 ff38 	bl	8003404 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800159a:	f000 f817 	bl	80015cc <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3740      	adds	r7, #64	@ 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ba:	f000 fb23 	bl	8001c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40014800 	.word	0x40014800

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <Error_Handler+0x8>

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_MspInit+0x4c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_MspInit+0x4c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_MspInit+0x4c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_MspInit+0x4c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <HAL_MspInit+0x4c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_MspInit+0x4c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	210f      	movs	r1, #15
 8001612:	f06f 0001 	mvn.w	r0, #1
 8001616:	f000 fcc9 	bl	8001fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	@ 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001638:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_InitTick+0xcc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a2d      	ldr	r2, [pc, #180]	@ (80016f4 <HAL_InitTick+0xcc>)
 800163e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_InitTick+0xcc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 020c 	add.w	r2, r7, #12
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f8d0 	bl	8003800 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001660:	f002 f8ac 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8001664:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <HAL_InitTick+0xd0>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3b01      	subs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001674:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <HAL_InitTick+0xd4>)
 8001676:	4a22      	ldr	r2, [pc, #136]	@ (8001700 <HAL_InitTick+0xd8>)
 8001678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_InitTick+0xd4>)
 800167c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001680:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001682:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <HAL_InitTick+0xd4>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_InitTick+0xd4>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_InitTick+0xd4>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_InitTick+0xd4>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800169a:	4818      	ldr	r0, [pc, #96]	@ (80016fc <HAL_InitTick+0xd4>)
 800169c:	f002 f8e2 	bl	8003864 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11b      	bne.n	80016e6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80016ae:	4813      	ldr	r0, [pc, #76]	@ (80016fc <HAL_InitTick+0xd4>)
 80016b0:	f002 f930 	bl	8003914 <HAL_TIM_Base_Start_IT>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d111      	bne.n	80016e6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80016c2:	201a      	movs	r0, #26
 80016c4:	f000 fc8e 	bl	8001fe4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d808      	bhi.n	80016e0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	201a      	movs	r0, #26
 80016d4:	f000 fc6a 	bl	8001fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_InitTick+0xdc>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e002      	b.n	80016e6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3730      	adds	r7, #48	@ 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	20000174 	.word	0x20000174
 8001700:	40014800 	.word	0x40014800
 8001704:	20000008 	.word	0x20000008

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001746:	f002 fbe5 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000174 	.word	0x20000174

08001754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SW4_Pin);
 8001758:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800175c:	f000 fdfc 	bl	8002358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SW5_Pin);
 8001760:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001764:	f000 fdf8 	bl	8002358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SW6_Pin);
 8001768:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800176c:	f000 fdf4 	bl	8002358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 ff80 	bl	80086ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017be:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017de:	2301      	movs	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <MX_TIM2_Init+0xa4>)
 800180a:	f002 fa4f 	bl	8003cac <HAL_TIM_Encoder_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001814:	f7ff feda 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_TIM2_Init+0xa4>)
 8001826:	f003 faaf 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001830:	f7ff fecc 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3730      	adds	r7, #48	@ 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200001c0 	.word	0x200001c0

08001840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 ff2c 	bl	80086ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <MX_TIM3_Init+0xa8>)
 8001862:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 8001872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001884:	2301      	movs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 80018b0:	f002 f9fc 	bl	8003cac <HAL_TIM_Encoder_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018ba:	f7ff fe87 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 80018cc:	f003 fa5c 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018d6:	f7ff fe79 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3730      	adds	r7, #48	@ 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000020c 	.word	0x2000020c
 80018e8:	40000400 	.word	0x40000400

080018ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	@ 0x38
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001920:	4a32      	ldr	r2, [pc, #200]	@ (80019ec <MX_TIM4_Init+0x100>)
 8001922:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001926:	2247      	movs	r2, #71	@ 0x47
 8001928:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001936:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001944:	4828      	ldr	r0, [pc, #160]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001946:	f001 ff8d 	bl	8003864 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001950:	f7ff fe3c 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195e:	4619      	mov	r1, r3
 8001960:	4821      	ldr	r0, [pc, #132]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001962:	f002 fced 	bl	8004340 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800196c:	f7ff fe2e 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001970:	481d      	ldr	r0, [pc, #116]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001972:	f002 f839 	bl	80039e8 <HAL_TIM_PWM_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800197c:	f7ff fe26 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4816      	ldr	r0, [pc, #88]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 8001990:	f003 f9fa 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800199a:	f7ff fe17 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199e:	2360      	movs	r3, #96	@ 0x60
 80019a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 80019b6:	f002 fbaf 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019c0:	f7ff fe04 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2204      	movs	r2, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 80019cc:	f002 fba4 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80019d6:	f7ff fdf9 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019da:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <MX_TIM4_Init+0xfc>)
 80019dc:	f000 f89a 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 80019e0:	bf00      	nop
 80019e2:	3738      	adds	r7, #56	@ 0x38
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000258 	.word	0x20000258
 80019ec:	40000800 	.word	0x40000800

080019f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a10:	d129      	bne.n	8001a66 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a12:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a2d      	ldr	r2, [pc, #180]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a27      	ldr	r2, [pc, #156]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a42:	2303      	movs	r3, #3
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a60:	f000 face 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a64:	e02d      	b.n	8001ac2 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d128      	bne.n	8001ac2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a92:	6153      	str	r3, [r2, #20]
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa0:	23c0      	movs	r3, #192	@ 0xc0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abe:	f000 fa9f 	bl	8002000 <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	@ 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_TIM_Base_MspInit+0x38>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10b      	bne.n	8001afe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40000800 	.word	0x40000800
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_TIM_MspPostInit+0x64>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11b      	bne.n	8001b6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4e:	23c0      	movs	r3, #192	@ 0xc0
 8001b50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <HAL_TIM_MspPostInit+0x6c>)
 8001b6a:	f000 fa49 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bbc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff fdf4 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8e:	490d      	ldr	r1, [pc, #52]	@ (8001bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <LoopForever+0xe>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd0 <LoopForever+0x16>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f006 fd83 	bl	80086bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb6:	f7ff fc99 	bl	80014ec <main>

08001bba <LoopForever>:

LoopForever:
    b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001bc8:	08008990 	.word	0x08008990
  ldr r2, =_sbss
 8001bcc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001bd0:	2000256c 	.word	0x2000256c

08001bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_2_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x28>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f9d4 	bl	8001f96 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f7ff fd1a 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fcf0 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	200002a4 	.word	0x200002a4

08001c2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200002a4 	.word	0x200002a4

08001c44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0ed      	b.n	8001e32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fa7c 	bl	8001160 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c78:	f7ff ffd8 	bl	8001c2c <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c7e:	e012      	b.n	8001ca6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c80:	f7ff ffd4 	bl	8001c2c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b0a      	cmp	r3, #10
 8001c8c:	d90b      	bls.n	8001ca6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0c5      	b.n	8001e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0e5      	beq.n	8001c80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0202 	bic.w	r2, r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc4:	f7ff ffb2 	bl	8001c2c <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cca:	e012      	b.n	8001cf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ccc:	f7ff ffae 	bl	8001c2c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d90b      	bls.n	8001cf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2205      	movs	r2, #5
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e09f      	b.n	8001e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e5      	bne.n	8001ccc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e1b      	ldrb	r3, [r3, #24]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d108      	bne.n	8001d1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e007      	b.n	8001d2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7e5b      	ldrb	r3, [r3, #25]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e9b      	ldrb	r3, [r3, #26]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e007      	b.n	8001d7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0220 	bic.w	r2, r2, #32
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7edb      	ldrb	r3, [r3, #27]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0210 	bic.w	r2, r2, #16
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0210 	orr.w	r2, r2, #16
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7f1b      	ldrb	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7f5b      	ldrb	r3, [r3, #29]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0204 	orr.w	r2, r2, #4
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0204 	bic.w	r2, r2, #4
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	ea42 0103 	orr.w	r1, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	@ (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff4c 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbe:	f7ff ff61 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8001fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff ffb1 	bl	8001f30 <NVIC_EncodePriority>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff80 	bl	8001edc <__NVIC_SetPriority>
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff54 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e154      	b.n	80022ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8146 	beq.w	80022b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <HAL_GPIO_Init+0x40>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d130      	bne.n	80020a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002076:	2201      	movs	r2, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 0201 	and.w	r2, r3, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d017      	beq.n	80020de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80a0 	beq.w	80022b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002174:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_GPIO_Init+0x2d8>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <HAL_GPIO_Init+0x2d8>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b55      	ldr	r3, [pc, #340]	@ (80022d8 <HAL_GPIO_Init+0x2d8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800218c:	4a53      	ldr	r2, [pc, #332]	@ (80022dc <HAL_GPIO_Init+0x2dc>)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021b6:	d019      	beq.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a49      	ldr	r2, [pc, #292]	@ (80022e0 <HAL_GPIO_Init+0x2e0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d013      	beq.n	80021e8 <HAL_GPIO_Init+0x1e8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a48      	ldr	r2, [pc, #288]	@ (80022e4 <HAL_GPIO_Init+0x2e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00d      	beq.n	80021e4 <HAL_GPIO_Init+0x1e4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a47      	ldr	r2, [pc, #284]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d007      	beq.n	80021e0 <HAL_GPIO_Init+0x1e0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a46      	ldr	r2, [pc, #280]	@ (80022ec <HAL_GPIO_Init+0x2ec>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d101      	bne.n	80021dc <HAL_GPIO_Init+0x1dc>
 80021d8:	2304      	movs	r3, #4
 80021da:	e008      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021dc:	2305      	movs	r3, #5
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	@ (80022dc <HAL_GPIO_Init+0x2dc>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220c:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002230:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002236:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225a:	4a25      	ldr	r2, [pc, #148]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002260:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002284:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ae:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aea3 	bne.w	8002010 <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	48001000 	.word	0x48001000
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43d9      	mvns	r1, r3
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	400b      	ands	r3, r1
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f85c 	bl	8001434 <HAL_GPIO_EXTI_Callback>
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010400 	.word	0x40010400

08002388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800238e:	af00      	add	r7, sp, #0
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f001 b823 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 817d 	beq.w	80026be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023c4:	4bbc      	ldr	r3, [pc, #752]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	4bb9      	ldr	r3, [pc, #740]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d15c      	bne.n	8002496 <HAL_RCC_OscConfig+0x10e>
 80023dc:	4bb6      	ldr	r3, [pc, #728]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d155      	bne.n	8002496 <HAL_RCC_OscConfig+0x10e>
 80023ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x94>
 8002416:	4ba8      	ldr	r3, [pc, #672]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0xc0>
 800241c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002420:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002434:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002438:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002444:	4b9c      	ldr	r3, [pc, #624]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800244c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002450:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800245c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 811f 	beq.w	80026bc <HAL_RCC_OscConfig+0x334>
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8116 	bne.w	80026bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f000 bfaf 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12e>
 80024a8:	4b83      	ldr	r3, [pc, #524]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a82      	ldr	r2, [pc, #520]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e036      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x158>
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a78      	ldr	r2, [pc, #480]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e021      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x184>
 80024f2:	4b71      	ldr	r3, [pc, #452]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a70      	ldr	r2, [pc, #448]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6e      	ldr	r3, [pc, #440]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6d      	ldr	r2, [pc, #436]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 800250c:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a69      	ldr	r2, [pc, #420]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b67      	ldr	r3, [pc, #412]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a66      	ldr	r2, [pc, #408]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002524:	4b64      	ldr	r3, [pc, #400]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f023 020f 	bic.w	r2, r3, #15
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	495f      	ldr	r1, [pc, #380]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800253a:	4313      	orrs	r3, r2
 800253c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d059      	beq.n	8002602 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fb6d 	bl	8001c2c <HAL_GetTick>
 8002552:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fb68 	bl	8001c2c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d902      	bls.n	800256e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	f000 bf43 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 800256e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002572:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002582:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0x218>
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e015      	b.n	80025cc <HAL_RCC_OscConfig+0x244>
 80025a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80025c8:	4b3b      	ldr	r3, [pc, #236]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025d0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80025d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80025e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ab      	beq.n	8002558 <HAL_RCC_OscConfig+0x1d0>
 8002600:	e05d      	b.n	80026be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fb13 	bl	8001c2c <HAL_GetTick>
 8002606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff fb0e 	bl	8001c2c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	@ 0x64
 800261a:	d902      	bls.n	8002622 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	f000 bee9 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002622:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002626:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002636:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0x2cc>
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x2f8>
 8002654:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002658:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002668:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002670:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002684:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002688:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800268c:	fa92 f2a2 	rbit	r2, r2
 8002690:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002694:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f002 021f 	and.w	r2, r2, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ab      	bne.n	800260c <HAL_RCC_OscConfig+0x284>
 80026b4:	e003      	b.n	80026be <HAL_RCC_OscConfig+0x336>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 817d 	beq.w	80029ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e0:	4ba3      	ldr	r3, [pc, #652]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d172      	bne.n	80027d2 <HAL_RCC_OscConfig+0x44a>
 80026ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d16c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x44a>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800270a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x3a0>
 8002722:	4b93      	ldr	r3, [pc, #588]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x3c8>
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002740:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800274c:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002756:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002762:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCC_OscConfig+0x410>
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f000 be2e 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	21f8      	movs	r1, #248	@ 0xf8
 80027ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027b6:	fa91 f1a1 	rbit	r1, r1
 80027ba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80027be:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80027c2:	fab1 f181 	clz	r1, r1
 80027c6:	b2c9      	uxtb	r1, r1
 80027c8:	408b      	lsls	r3, r1
 80027ca:	4969      	ldr	r1, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d0:	e0fd      	b.n	80029ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8088 	beq.w	80028f4 <HAL_RCC_OscConfig+0x56c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80027f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002804:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	461a      	mov	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fa0c 	bl	8001c2c <HAL_GetTick>
 8002814:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281a:	f7ff fa07 	bl	8001c2c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f000 bde2 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002842:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x500>
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002872:	2302      	movs	r3, #2
 8002874:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002878:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	2202      	movs	r2, #2
 800288a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800288e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800289a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800289e:	fab2 f282 	clz	r2, r2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f002 021f 	and.w	r2, r2, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0af      	beq.n	800281a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	21f8      	movs	r1, #248	@ 0xf8
 80028d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028d8:	fa91 f1a1 	rbit	r1, r1
 80028dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80028e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80028e4:	fab1 f181 	clz	r1, r1
 80028e8:	b2c9      	uxtb	r1, r1
 80028ea:	408b      	lsls	r3, r1
 80028ec:	4920      	ldr	r1, [pc, #128]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
 80028f2:	e06c      	b.n	80029ce <HAL_RCC_OscConfig+0x646>
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002906:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002914:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	461a      	mov	r2, r3
 800291c:	2300      	movs	r3, #0
 800291e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f984 	bl	8001c2c <HAL_GetTick>
 8002924:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292a:	f7ff f97f 	bl	8001c2c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	f000 bd5a 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002952:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d104      	bne.n	8002974 <HAL_RCC_OscConfig+0x5ec>
 800296a:	4b01      	ldr	r3, [pc, #4]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e015      	b.n	800299c <HAL_RCC_OscConfig+0x614>
 8002970:	40021000 	.word	0x40021000
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800298c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002998:	4bc8      	ldr	r3, [pc, #800]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80029a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80029ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f002 021f 	and.w	r2, r2, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ad      	bne.n	800292a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8110 	beq.w	8002c04 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d079      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x760>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4bab      	ldr	r3, [pc, #684]	@ (8002cc0 <HAL_RCC_OscConfig+0x938>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff f905 	bl	8001c2c <HAL_GetTick>
 8002a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f900 	bl	8001c2c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f000 bcdb 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a98:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	6019      	str	r1, [r3, #0]
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f1a3 	rbit	r1, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002abe:	6019      	str	r1, [r3, #0]
  return result;
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0a0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x6a0>
 8002ae6:	e08d      	b.n	8002c04 <HAL_RCC_OscConfig+0x87c>
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b0a:	601a      	str	r2, [r3, #0]
  return result;
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <HAL_RCC_OscConfig+0x938>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff f87f 	bl	8001c2c <HAL_GetTick>
 8002b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff f87a 	bl	8001c2c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	f000 bc55 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b52:	2202      	movs	r2, #2
 8002b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	6019      	str	r1, [r3, #0]
 8002bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f1a3 	rbit	r1, r3
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bdc:	6019      	str	r1, [r3, #0]
  return result;
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d197      	bne.n	8002b34 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 81a1 	beq.w	8002f5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	61d3      	str	r3, [r2, #28]
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe ffdb 	bl	8001c2c <HAL_GetTick>
 8002c76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	e009      	b.n	8002c90 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe ffd6 	bl	8001c2c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	@ 0x64
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e3b1      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x940>
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a02      	ldr	r2, [pc, #8]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e03c      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	10908120 	.word	0x10908120
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x96a>
 8002cd8:	4bc1      	ldr	r3, [pc, #772]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4ac0      	ldr	r2, [pc, #768]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	4bbe      	ldr	r3, [pc, #760]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4abd      	ldr	r2, [pc, #756]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e020      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x994>
 8002d02:	4bb7      	ldr	r3, [pc, #732]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4ab6      	ldr	r2, [pc, #728]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4bb4      	ldr	r3, [pc, #720]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4ab3      	ldr	r2, [pc, #716]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6213      	str	r3, [r2, #32]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002d1c:	4bb0      	ldr	r3, [pc, #704]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4aaf      	ldr	r2, [pc, #700]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	4bad      	ldr	r3, [pc, #692]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4aac      	ldr	r2, [pc, #688]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8081 	beq.w	8002e48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe ff71 	bl	8001c2c <HAL_GetTick>
 8002d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe ff6c 	bl	8001c2c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e345      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	2202      	movs	r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002db8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xa4c>
 8002dce:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	e013      	b.n	8002dfc <HAL_RCC_OscConfig+0xa74>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e04:	2102      	movs	r1, #2
 8002e06:	6011      	str	r1, [r2, #0]
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fa92 f1a2 	rbit	r1, r2
 8002e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e1e:	6011      	str	r1, [r2, #0]
  return result;
 8002e20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e24:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d084      	beq.n	8002d50 <HAL_RCC_OscConfig+0x9c8>
 8002e46:	e07f      	b.n	8002f48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7fe fef0 	bl	8001c2c <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe feeb 	bl	8001c2c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e2c4      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xb4e>
 8002ed0:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0xb76>
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ede:	2202      	movs	r2, #2
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f02:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f06:	2102      	movs	r1, #2
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f0e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f1c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f20:	6011      	str	r1, [r2, #0]
  return result;
 8002f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f26:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d184      	bne.n	8002e52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f48:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8242 	beq.w	80033f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	f000 8213 	beq.w	80033a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f040 8162 	bne.w	8003252 <HAL_RCC_OscConfig+0xeca>
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fe2a 	bl	8001c2c <HAL_GetTick>
 8002fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCC_OscConfig+0xc70>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fe22 	bl	8001c2c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1fd      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800301c:	601a      	str	r2, [r3, #0]
  return result;
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003026:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d102      	bne.n	8003042 <HAL_RCC_OscConfig+0xcba>
 800303c:	4bb0      	ldr	r3, [pc, #704]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	e027      	b.n	8003092 <HAL_RCC_OscConfig+0xd0a>
 8003042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003046:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800304a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003054:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	4b9c      	ldr	r3, [pc, #624]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003096:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800309a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800309e:	6011      	str	r1, [r2, #0]
 80030a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fa92 f1a2 	rbit	r1, r2
 80030ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030b6:	6011      	str	r1, [r2, #0]
  return result;
 80030b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f042 0220 	orr.w	r2, r2, #32
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d182      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030de:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	430b      	orrs	r3, r1
 8003100:	497f      	ldr	r1, [pc, #508]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800310e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003126:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003134:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003140:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	2301      	movs	r3, #1
 800314a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fd6e 	bl	8001c2c <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e009      	b.n	800316a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe fd69 	bl	8001c2c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e144      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003172:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800318e:	601a      	str	r2, [r3, #0]
  return result;
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe2c>
 80031ae:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e027      	b.n	8003204 <HAL_RCC_OscConfig+0xe7c>
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	4b3f      	ldr	r3, [pc, #252]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003208:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800320c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003216:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fa92 f1a2 	rbit	r1, r2
 8003220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003224:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003228:	6011      	str	r1, [r2, #0]
  return result;
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d082      	beq.n	8003156 <HAL_RCC_OscConfig+0xdce>
 8003250:	e0cf      	b.n	80033f2 <HAL_RCC_OscConfig+0x106a>
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800325a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800325e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fa93 f2a3 	rbit	r2, r3
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003276:	601a      	str	r2, [r3, #0]
  return result;
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003280:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800328c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fcc8 	bl	8001c2c <HAL_GetTick>
 800329c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fcc3 	bl	8001c2c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e09e      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032da:	601a      	str	r2, [r3, #0]
  return result;
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d104      	bne.n	8003304 <HAL_RCC_OscConfig+0xf7c>
 80032fa:	4b01      	ldr	r3, [pc, #4]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e029      	b.n	8003354 <HAL_RCC_OscConfig+0xfcc>
 8003300:	40021000 	.word	0x40021000
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800330c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003332:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_OscConfig+0x1078>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003358:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800335c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003366:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	fa92 f1a2 	rbit	r1, r2
 8003370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003374:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003378:	6011      	str	r1, [r2, #0]
  return result;
 800337a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800337e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fab2 f282 	clz	r2, r2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	f042 0220 	orr.w	r2, r2, #32
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d180      	bne.n	80032a2 <HAL_RCC_OscConfig+0xf1a>
 80033a0:	e027      	b.n	80033f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e01e      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_OscConfig+0x1078>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10b      	bne.n	80033ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b09e      	sub	sp, #120	@ 0x78
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e162      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b90      	ldr	r3, [pc, #576]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b8d      	ldr	r3, [pc, #564]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	498b      	ldr	r1, [pc, #556]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b89      	ldr	r3, [pc, #548]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e14a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	497f      	ldr	r1, [pc, #508]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80dc 	beq.w	8003630 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d13c      	bne.n	80034fa <HAL_RCC_ClockConfig+0xf6>
 8003480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003484:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_RCC_ClockConfig+0xa6>
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e00f      	b.n	80034ca <HAL_RCC_ClockConfig+0xc6>
 80034aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80034be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d2:	fa92 f2a2 	rbit	r2, r2
 80034d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d17b      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0f3      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d13c      	bne.n	800357c <HAL_RCC_ClockConfig+0x178>
 8003502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003506:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_RCC_ClockConfig+0x128>
 8003526:	4b4f      	ldr	r3, [pc, #316]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e00f      	b.n	800354c <HAL_RCC_ClockConfig+0x148>
 800352c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
 800353a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003550:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800355a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d13a      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b2      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
 800357c:	2302      	movs	r3, #2
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e00d      	b.n	80035c0 <HAL_RCC_ClockConfig+0x1bc>
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	2302      	movs	r3, #2
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	61ba      	str	r2, [r7, #24]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	617a      	str	r2, [r7, #20]
  return result;
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e079      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	491a      	ldr	r1, [pc, #104]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe fb14 	bl	8001c2c <HAL_GetTick>
 8003604:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fb10 	bl	8001c2c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e061      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d214      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4906      	ldr	r1, [pc, #24]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e040      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	491a      	ldr	r1, [pc, #104]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4912      	ldr	r1, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036a6:	f000 f829 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036aa:	4601      	mov	r1, r0
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b4:	22f0      	movs	r2, #240	@ 0xf0
 80036b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	60fa      	str	r2, [r7, #12]
  return result;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	40d3      	lsrs	r3, r2
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <HAL_RCC_ClockConfig+0x2ec>)
 80036cc:	5cd3      	ldrb	r3, [r2, r3]
 80036ce:	fa21 f303 	lsr.w	r3, r1, r3
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <HAL_RCC_ClockConfig+0x2f0>)
 80036d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_RCC_ClockConfig+0x2f4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd ffa4 	bl	8001628 <HAL_InitTick>
  
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3778      	adds	r7, #120	@ 0x78
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08008950 	.word	0x08008950
 80036f4:	20000004 	.word	0x20000004
 80036f8:	20000008 	.word	0x20000008

080036fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x30>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x36>
 800372a:	e026      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800372e:	613b      	str	r3, [r7, #16]
      break;
 8003730:	e026      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x9c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <HAL_RCC_GetSysClockFreq+0xa0>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003758:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e004      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0c      	ldr	r2, [pc, #48]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
      break;
 8003778:	e002      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800377c:	613b      	str	r3, [r7, #16]
      break;
 800377e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003780:	693b      	ldr	r3, [r7, #16]
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	08008968 	.word	0x08008968
 800379c:	08008978 	.word	0x08008978
 80037a0:	003d0900 	.word	0x003d0900

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037c2:	f7ff ffef 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c6:	4601      	mov	r1, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80037d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80037d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	fa92 f2a2 	rbit	r2, r2
 80037dc:	603a      	str	r2, [r7, #0]
  return result;
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	fab2 f282 	clz	r2, r2
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	40d3      	lsrs	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000
 80037fc:	08008960 	.word	0x08008960

08003800 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	220f      	movs	r2, #15
 800380e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <HAL_RCC_GetClockConfig+0x5c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_RCC_GetClockConfig+0x5c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003834:	4b09      	ldr	r3, [pc, #36]	@ (800385c <HAL_RCC_GetClockConfig+0x5c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <HAL_RCC_GetClockConfig+0x60>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0207 	and.w	r2, r3, #7
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	40022000 	.word	0x40022000

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e049      	b.n	800390a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe f922 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 fe3e 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04a      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a21      	ldr	r2, [pc, #132]	@ (80039d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d013      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1c      	ldr	r2, [pc, #112]	@ (80039d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <HAL_TIM_Base_Start_IT+0xc8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d115      	bne.n	80039ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d015      	beq.n	80039be <HAL_TIM_Base_Start_IT+0xaa>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003998:	d011      	beq.n	80039be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	e008      	b.n	80039be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40013400 	.word	0x40013400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	00010007 	.word	0x00010007

080039e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e049      	b.n	8003a8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f841 	bl	8003a96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fd7c 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_TIM_PWM_Start+0x24>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e03c      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d109      	bne.n	8003aea <HAL_TIM_PWM_Start+0x3e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e02f      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x58>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e022      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d109      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x72>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e015      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x8c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e097      	b.n	8003c82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xb6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b60:	e023      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xc6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b70:	e01b      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xe6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b90:	e00b      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0xf6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f8c2 	bl	8004d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a33      	ldr	r2, [pc, #204]	@ (8003c8c <HAL_TIM_PWM_Start+0x1e0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a32      	ldr	r2, [pc, #200]	@ (8003c90 <HAL_TIM_PWM_Start+0x1e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a30      	ldr	r2, [pc, #192]	@ (8003c94 <HAL_TIM_PWM_Start+0x1e8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2f      	ldr	r2, [pc, #188]	@ (8003c98 <HAL_TIM_PWM_Start+0x1ec>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c9c <HAL_TIM_PWM_Start+0x1f0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Start+0x142>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_TIM_PWM_Start+0x144>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <HAL_TIM_PWM_Start+0x1e0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c16:	d013      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <HAL_TIM_PWM_Start+0x1f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_TIM_PWM_Start+0x1f8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	@ (8003c90 <HAL_TIM_PWM_Start+0x1e4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <HAL_TIM_PWM_Start+0x1e8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d115      	bne.n	8003c6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <HAL_TIM_PWM_Start+0x1fc>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d015      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c58:	d011      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	e008      	b.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	00010007 	.word	0x00010007

08003cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e097      	b.n	8003df0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fd fe8b 	bl	80019f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003cf0:	f023 0307 	bic.w	r3, r3, #7
 8003cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fc0f 	bl	8004524 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d4c:	f023 030c 	bic.w	r3, r3, #12
 8003d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	011a      	lsls	r2, r3, #4
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	031b      	lsls	r3, r3, #12
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d110      	bne.n	8003e4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d102      	bne.n	8003e34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e2e:	7b7b      	ldrb	r3, [r7, #13]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d001      	beq.n	8003e38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e069      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e48:	e031      	b.n	8003eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d110      	bne.n	8003e72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e56:	7b3b      	ldrb	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e055      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e70:	e01d      	b.n	8003eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e7e:	7b7b      	ldrb	r3, [r7, #13]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d102      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e84:	7b3b      	ldrb	r3, [r7, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e03e      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_Encoder_Start+0xc4>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d008      	beq.n	8003ecc <HAL_TIM_Encoder_Start+0xd4>
 8003eba:	e00f      	b.n	8003edc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ff39 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003eca:	e016      	b.n	8003efa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 ff31 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003eda:	e00e      	b.n	8003efa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ff29 	bl	8004d3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 ff22 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003ef8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fac1 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fab3 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fac4 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa9b 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa8d 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa9e 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa75 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa67 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa78 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa4f 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa41 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa52 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fa94 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fefc 	bl	8004e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fef4 	bl	8004eb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa11 	bl	800450e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0220 	mvn.w	r2, #32
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 febc 	bl	8004e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0ff      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b14      	cmp	r3, #20
 8004142:	f200 80f0 	bhi.w	8004326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	080041a1 	.word	0x080041a1
 8004150:	08004327 	.word	0x08004327
 8004154:	08004327 	.word	0x08004327
 8004158:	08004327 	.word	0x08004327
 800415c:	080041e1 	.word	0x080041e1
 8004160:	08004327 	.word	0x08004327
 8004164:	08004327 	.word	0x08004327
 8004168:	08004327 	.word	0x08004327
 800416c:	08004223 	.word	0x08004223
 8004170:	08004327 	.word	0x08004327
 8004174:	08004327 	.word	0x08004327
 8004178:	08004327 	.word	0x08004327
 800417c:	08004263 	.word	0x08004263
 8004180:	08004327 	.word	0x08004327
 8004184:	08004327 	.word	0x08004327
 8004188:	08004327 	.word	0x08004327
 800418c:	080042a5 	.word	0x080042a5
 8004190:	08004327 	.word	0x08004327
 8004194:	08004327 	.word	0x08004327
 8004198:	08004327 	.word	0x08004327
 800419c:	080042e5 	.word	0x080042e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa58 	bl	800465c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	619a      	str	r2, [r3, #24]
      break;
 80041de:	e0a5      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fac8 	bl	800477c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
      break;
 8004220:	e084      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb31 	bl	8004890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
      break;
 8004260:	e064      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fb99 	bl	80049a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	021a      	lsls	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	61da      	str	r2, [r3, #28]
      break;
 80042a2:	e043      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fbe2 	bl	8004a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042e2:	e023      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fc26 	bl	8004b3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004324:	e002      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      break;
 800432a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop

08004340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIM_ConfigClockSource+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e0b6      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x18a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xd8>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x176>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xaa>
 80043b4:	2b70      	cmp	r3, #112	@ 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x11e>
 80043bc:	2b60      	cmp	r3, #96	@ 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xfe>
 80043c4:	2b50      	cmp	r3, #80	@ 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x13e>
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15e>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15e>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15e>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15e>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	f000 fc7f 	bl	8004cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	f000 fc68 	bl	8004cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fbdc 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc35 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fbfb 	bl	8004c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	@ 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fc25 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fbbc 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc15 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fc0c 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a42      	ldr	r2, [pc, #264]	@ (8004640 <TIM_Base_SetConfig+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <TIM_Base_SetConfig+0x120>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3e      	ldr	r2, [pc, #248]	@ (8004648 <TIM_Base_SetConfig+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3d      	ldr	r2, [pc, #244]	@ (800464c <TIM_Base_SetConfig+0x128>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a33      	ldr	r2, [pc, #204]	@ (8004640 <TIM_Base_SetConfig+0x11c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457c:	d017      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a30      	ldr	r2, [pc, #192]	@ (8004644 <TIM_Base_SetConfig+0x120>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2f      	ldr	r2, [pc, #188]	@ (8004648 <TIM_Base_SetConfig+0x124>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2e      	ldr	r2, [pc, #184]	@ (800464c <TIM_Base_SetConfig+0x128>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a16      	ldr	r2, [pc, #88]	@ (8004640 <TIM_Base_SetConfig+0x11c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a17      	ldr	r2, [pc, #92]	@ (800464c <TIM_Base_SetConfig+0x128>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]
  }
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40013400 	.word	0x40013400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800

0800465c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 0201 	bic.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 0302 	bic.w	r3, r3, #2
 80046a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <TIM_OC1_SetConfig+0x10c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <TIM_OC1_SetConfig+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <TIM_OC1_SetConfig+0x110>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_OC1_SetConfig+0x80>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004770 <TIM_OC1_SetConfig+0x114>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_OC1_SetConfig+0x80>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <TIM_OC1_SetConfig+0x118>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC1_SetConfig+0x80>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <TIM_OC1_SetConfig+0x11c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10c      	bne.n	80046f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0308 	bic.w	r3, r3, #8
 80046e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <TIM_OC1_SetConfig+0x10c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00f      	beq.n	800471e <TIM_OC1_SetConfig+0xc2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <TIM_OC1_SetConfig+0x110>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_OC1_SetConfig+0xc2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <TIM_OC1_SetConfig+0x114>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_OC1_SetConfig+0xc2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a18      	ldr	r2, [pc, #96]	@ (8004774 <TIM_OC1_SetConfig+0x118>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC1_SetConfig+0xc2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a17      	ldr	r2, [pc, #92]	@ (8004778 <TIM_OC1_SetConfig+0x11c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d111      	bne.n	8004742 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f023 0210 	bic.w	r2, r3, #16
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0320 	bic.w	r3, r3, #32
 80047ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a28      	ldr	r2, [pc, #160]	@ (800487c <TIM_OC2_SetConfig+0x100>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC2_SetConfig+0x6c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a27      	ldr	r2, [pc, #156]	@ (8004880 <TIM_OC2_SetConfig+0x104>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10d      	bne.n	8004804 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1d      	ldr	r2, [pc, #116]	@ (800487c <TIM_OC2_SetConfig+0x100>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_OC2_SetConfig+0xb0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <TIM_OC2_SetConfig+0x104>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_OC2_SetConfig+0xb0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <TIM_OC2_SetConfig+0x108>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_OC2_SetConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <TIM_OC2_SetConfig+0x10c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC2_SetConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <TIM_OC2_SetConfig+0x110>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d113      	bne.n	8004854 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004832:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800483a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40013400 	.word	0x40013400
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a27      	ldr	r2, [pc, #156]	@ (800498c <TIM_OC3_SetConfig+0xfc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d003      	beq.n	80048fa <TIM_OC3_SetConfig+0x6a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a26      	ldr	r2, [pc, #152]	@ (8004990 <TIM_OC3_SetConfig+0x100>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10d      	bne.n	8004916 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004914:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <TIM_OC3_SetConfig+0xfc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_OC3_SetConfig+0xae>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <TIM_OC3_SetConfig+0x100>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_OC3_SetConfig+0xae>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1a      	ldr	r2, [pc, #104]	@ (8004994 <TIM_OC3_SetConfig+0x104>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_OC3_SetConfig+0xae>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <TIM_OC3_SetConfig+0x108>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC3_SetConfig+0xae>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a18      	ldr	r2, [pc, #96]	@ (800499c <TIM_OC3_SetConfig+0x10c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d113      	bne.n	8004966 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	621a      	str	r2, [r3, #32]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <TIM_OC4_SetConfig+0xc0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_OC4_SetConfig+0x84>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <TIM_OC4_SetConfig+0xc4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_OC4_SetConfig+0x84>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <TIM_OC4_SetConfig+0xc8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_OC4_SetConfig+0x84>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <TIM_OC4_SetConfig+0xcc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_OC4_SetConfig+0x84>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <TIM_OC4_SetConfig+0xd0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d109      	bne.n	8004a38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <TIM_OC5_SetConfig+0xb4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00f      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_OC5_SetConfig+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_OC5_SetConfig+0xbc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	@ (8004b34 <TIM_OC5_SetConfig+0xc0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	@ (8004b38 <TIM_OC5_SetConfig+0xc4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d109      	bne.n	8004b02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_OC6_SetConfig+0xb8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <TIM_OC6_SetConfig+0xbc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC6_SetConfig+0xc0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC6_SetConfig+0xc4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a14      	ldr	r2, [pc, #80]	@ (8004c04 <TIM_OC6_SetConfig+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d109      	bne.n	8004bcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 030a 	bic.w	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f023 0210 	bic.w	r2, r3, #16
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f043 0307 	orr.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2201      	movs	r2, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e063      	b.n	8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e12:	d013      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a18      	ldr	r2, [pc, #96]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a17      	ldr	r2, [pc, #92]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a12      	ldr	r2, [pc, #72]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a13      	ldr	r2, [pc, #76]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10c      	bne.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	607b      	str	r3, [r7, #4]
  return(result);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <osKernelInitialize+0x32>
 8004ee2:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <osKernelInitialize+0x64>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d109      	bne.n	8004efe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eea:	f3ef 8311 	mrs	r3, BASEPRI
 8004eee:	603b      	str	r3, [r7, #0]
  return(result);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ef6:	f06f 0305 	mvn.w	r3, #5
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e00c      	b.n	8004f18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004efe:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <osKernelInitialize+0x64>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f06:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <osKernelInitialize+0x64>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e002      	b.n	8004f18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f18:	68fb      	ldr	r3, [r7, #12]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	200002a8 	.word	0x200002a8

08004f2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f32:	f3ef 8305 	mrs	r3, IPSR
 8004f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	607b      	str	r3, [r7, #4]
  return(result);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <osKernelStart+0x32>
 8004f4a:	4b11      	ldr	r3, [pc, #68]	@ (8004f90 <osKernelStart+0x64>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d109      	bne.n	8004f66 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f52:	f3ef 8311 	mrs	r3, BASEPRI
 8004f56:	603b      	str	r3, [r7, #0]
  return(result);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f5e:	f06f 0305 	mvn.w	r3, #5
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e00e      	b.n	8004f84 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f66:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <osKernelStart+0x64>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f6e:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <osKernelStart+0x64>)
 8004f70:	2202      	movs	r2, #2
 8004f72:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f74:	f001 fdee 	bl	8006b54 <vTaskStartScheduler>
      stat = osOK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e002      	b.n	8004f84 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200002a8 	.word	0x200002a8

08004f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b092      	sub	sp, #72	@ 0x48
 8004f98:	af04      	add	r7, sp, #16
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa4:	f3ef 8305 	mrs	r3, IPSR
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 8094 	bne.w	80050da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 808d 	bne.w	80050da <osThreadNew+0x146>
 8004fc0:	4b48      	ldr	r3, [pc, #288]	@ (80050e4 <osThreadNew+0x150>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d106      	bne.n	8004fd6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8082 	bne.w	80050da <osThreadNew+0x146>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d07e      	beq.n	80050da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004fe0:	2318      	movs	r3, #24
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004fe8:	f107 031b 	add.w	r3, r7, #27
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d045      	beq.n	8005086 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <osThreadNew+0x74>
        name = attr->name;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <osThreadNew+0x9a>
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	2b38      	cmp	r3, #56	@ 0x38
 8005020:	d805      	bhi.n	800502e <osThreadNew+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <osThreadNew+0x9e>
        return (NULL);
 800502e:	2300      	movs	r3, #0
 8005030:	e054      	b.n	80050dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00e      	beq.n	8005068 <osThreadNew+0xd4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005050:	d90a      	bls.n	8005068 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <osThreadNew+0xd4>
        mem = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005066:	e010      	b.n	800508a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10c      	bne.n	800508a <osThreadNew+0xf6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <osThreadNew+0xf6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <osThreadNew+0xf6>
          mem = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005084:	e001      	b.n	800508a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	2b01      	cmp	r3, #1
 800508e:	d110      	bne.n	80050b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005098:	9202      	str	r2, [sp, #8]
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f001 fb82 	bl	80067b0 <xTaskCreateStatic>
 80050ac:	4603      	mov	r3, r0
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e013      	b.n	80050da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d110      	bne.n	80050da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 fbcf 	bl	800686e <xTaskCreate>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <osThreadNew+0x146>
          hTask = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3738      	adds	r7, #56	@ 0x38
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200002a8 	.word	0x200002a8

080050e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f0:	f3ef 8305 	mrs	r3, IPSR
 80050f4:	613b      	str	r3, [r7, #16]
  return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10f      	bne.n	800511c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005100:	60fb      	str	r3, [r7, #12]
  return(result);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <osDelay+0x34>
 8005108:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <osDelay+0x58>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d109      	bne.n	8005124 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005110:	f3ef 8311 	mrs	r3, BASEPRI
 8005114:	60bb      	str	r3, [r7, #8]
  return(result);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <osDelay+0x3c>
    stat = osErrorISR;
 800511c:	f06f 0305 	mvn.w	r3, #5
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e007      	b.n	8005134 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <osDelay+0x4c>
      vTaskDelay(ticks);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fcda 	bl	8006ae8 <vTaskDelay>
    }
  }

  return (stat);
 8005134:	697b      	ldr	r3, [r7, #20]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200002a8 	.word	0x200002a8

08005144 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005150:	f3ef 8305 	mrs	r3, IPSR
 8005154:	613b      	str	r3, [r7, #16]
  return(result);
 8005156:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005158:	2b00      	cmp	r3, #0
 800515a:	f040 8085 	bne.w	8005268 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515e:	f3ef 8310 	mrs	r3, PRIMASK
 8005162:	60fb      	str	r3, [r7, #12]
  return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17e      	bne.n	8005268 <osMutexNew+0x124>
 800516a:	4b42      	ldr	r3, [pc, #264]	@ (8005274 <osMutexNew+0x130>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d105      	bne.n	800517e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	60bb      	str	r3, [r7, #8]
  return(result);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d174      	bne.n	8005268 <osMutexNew+0x124>
    if (attr != NULL) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	623b      	str	r3, [r7, #32]
 800518a:	e001      	b.n	8005190 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <osMutexNew+0x5c>
      rmtx = 1U;
 800519a:	2301      	movs	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e001      	b.n	80051a4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d15c      	bne.n	8005268 <osMutexNew+0x124>
      mem = -1;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <osMutexNew+0x8c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80051c8:	d902      	bls.n	80051d0 <osMutexNew+0x8c>
          mem = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e00c      	b.n	80051ea <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <osMutexNew+0xa6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <osMutexNew+0xa6>
            mem = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e001      	b.n	80051ea <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d112      	bne.n	8005216 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4619      	mov	r1, r3
 80051fc:	2004      	movs	r0, #4
 80051fe:	f000 fcb7 	bl	8005b70 <xQueueCreateMutexStatic>
 8005202:	6278      	str	r0, [r7, #36]	@ 0x24
 8005204:	e016      	b.n	8005234 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4619      	mov	r1, r3
 800520c:	2001      	movs	r0, #1
 800520e:	f000 fcaf 	bl	8005b70 <xQueueCreateMutexStatic>
 8005212:	6278      	str	r0, [r7, #36]	@ 0x24
 8005214:	e00e      	b.n	8005234 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005222:	2004      	movs	r0, #4
 8005224:	f000 fc8c 	bl	8005b40 <xQueueCreateMutex>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24
 800522a:	e003      	b.n	8005234 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800522c:	2001      	movs	r0, #1
 800522e:	f000 fc87 	bl	8005b40 <xQueueCreateMutex>
 8005232:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <osMutexNew+0x110>
        if (attr != NULL) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <osMutexNew+0x104>
          name = attr->name;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e001      	b.n	800524c <osMutexNew+0x108>
        } else {
          name = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005250:	f001 fa50 	bl	80066f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <osMutexNew+0x124>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	@ 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200002a8 	.word	0x200002a8

08005278 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005296:	f3ef 8305 	mrs	r3, IPSR
 800529a:	613b      	str	r3, [r7, #16]
  return(result);
 800529c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a2:	f3ef 8310 	mrs	r3, PRIMASK
 80052a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <osMutexAcquire+0x4a>
 80052ae:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <osMutexAcquire+0xb8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d109      	bne.n	80052ca <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052b6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <osMutexAcquire+0x52>
    stat = osErrorISR;
 80052c2:	f06f 0305 	mvn.w	r3, #5
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	e02c      	b.n	8005324 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80052d0:	f06f 0303 	mvn.w	r3, #3
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e025      	b.n	8005324 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	69b8      	ldr	r0, [r7, #24]
 80052e2:	f000 fc95 	bl	8005c10 <xQueueTakeMutexRecursive>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d01b      	beq.n	8005324 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80052f2:	f06f 0301 	mvn.w	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e014      	b.n	8005324 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80052fa:	f06f 0302 	mvn.w	r3, #2
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e010      	b.n	8005324 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	69b8      	ldr	r0, [r7, #24]
 8005306:	f000 ff3b 	bl	8006180 <xQueueSemaphoreTake>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d009      	beq.n	8005324 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005316:	f06f 0301 	mvn.w	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e002      	b.n	8005324 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800531e:	f06f 0302 	mvn.w	r3, #2
 8005322:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005324:	69fb      	ldr	r3, [r7, #28]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200002a8 	.word	0x200002a8

08005334 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005350:	f3ef 8305 	mrs	r3, IPSR
 8005354:	613b      	str	r3, [r7, #16]
  return(result);
 8005356:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535c:	f3ef 8310 	mrs	r3, PRIMASK
 8005360:	60fb      	str	r3, [r7, #12]
  return(result);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <osMutexRelease+0x48>
 8005368:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <osMutexRelease+0x9c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d109      	bne.n	8005384 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	60bb      	str	r3, [r7, #8]
  return(result);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <osMutexRelease+0x50>
    stat = osErrorISR;
 800537c:	f06f 0305 	mvn.w	r3, #5
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e01f      	b.n	80053c4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800538a:	f06f 0303 	mvn.w	r3, #3
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e018      	b.n	80053c4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f000 fc04 	bl	8005ba6 <xQueueGiveMutexRecursive>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d00f      	beq.n	80053c4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80053a4:	f06f 0302 	mvn.w	r3, #2
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e00b      	b.n	80053c4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80053ac:	2300      	movs	r3, #0
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	69b8      	ldr	r0, [r7, #24]
 80053b4:	f000 fc64 	bl	8005c80 <xQueueGenericSend>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d002      	beq.n	80053c4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80053be:	f06f 0302 	mvn.w	r3, #2
 80053c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80053c4:	69fb      	ldr	r3, [r7, #28]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	200002a8 	.word	0x200002a8

080053d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	@ 0x30
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e4:	f3ef 8305 	mrs	r3, IPSR
 80053e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80053ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d16f      	bne.n	80054d0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f0:	f3ef 8310 	mrs	r3, PRIMASK
 80053f4:	617b      	str	r3, [r7, #20]
  return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d169      	bne.n	80054d0 <osMessageQueueNew+0xfc>
 80053fc:	4b37      	ldr	r3, [pc, #220]	@ (80054dc <osMessageQueueNew+0x108>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d105      	bne.n	8005410 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005404:	f3ef 8311 	mrs	r3, BASEPRI
 8005408:	613b      	str	r3, [r7, #16]
  return(result);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d15f      	bne.n	80054d0 <osMessageQueueNew+0xfc>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d05c      	beq.n	80054d0 <osMessageQueueNew+0xfc>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d059      	beq.n	80054d0 <osMessageQueueNew+0xfc>
    mem = -1;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d029      	beq.n	800547c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <osMessageQueueNew+0x82>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b4f      	cmp	r3, #79	@ 0x4f
 8005436:	d90e      	bls.n	8005456 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <osMessageQueueNew+0x82>
        mem = 1;
 8005450:	2301      	movs	r3, #1
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	e014      	b.n	8005480 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d110      	bne.n	8005480 <osMessageQueueNew+0xac>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10c      	bne.n	8005480 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <osMessageQueueNew+0xac>
          mem = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	e001      	b.n	8005480 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10b      	bne.n	800549e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2100      	movs	r1, #0
 8005490:	9100      	str	r1, [sp, #0]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fa5b 	bl	8005950 <xQueueGenericCreateStatic>
 800549a:	6278      	str	r0, [r7, #36]	@ 0x24
 800549c:	e008      	b.n	80054b0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80054a4:	2200      	movs	r2, #0
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 facd 	bl	8005a48 <xQueueGenericCreate>
 80054ae:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	e001      	b.n	80054c8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80054c8:	69f9      	ldr	r1, [r7, #28]
 80054ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054cc:	f001 f912 	bl	80066f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3728      	adds	r7, #40	@ 0x28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200002a8 	.word	0x200002a8

080054e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	@ 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f8:	f3ef 8305 	mrs	r3, IPSR
 80054fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80054fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005504:	f3ef 8310 	mrs	r3, PRIMASK
 8005508:	61bb      	str	r3, [r7, #24]
  return(result);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <osMessageQueuePut+0x44>
 8005510:	4b2b      	ldr	r3, [pc, #172]	@ (80055c0 <osMessageQueuePut+0xe0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d12e      	bne.n	8005576 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005518:	f3ef 8311 	mrs	r3, BASEPRI
 800551c:	617b      	str	r3, [r7, #20]
  return(result);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d028      	beq.n	8005576 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <osMessageQueuePut+0x56>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <osMessageQueuePut+0x56>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005536:	f06f 0303 	mvn.w	r3, #3
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800553c:	e039      	b.n	80055b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005542:	f107 0210 	add.w	r2, r7, #16
 8005546:	2300      	movs	r3, #0
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6a38      	ldr	r0, [r7, #32]
 800554c:	f000 fc9a 	bl	8005e84 <xQueueGenericSendFromISR>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d003      	beq.n	800555e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005556:	f06f 0302 	mvn.w	r3, #2
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800555c:	e029      	b.n	80055b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d026      	beq.n	80055b2 <osMessageQueuePut+0xd2>
 8005564:	4b17      	ldr	r3, [pc, #92]	@ (80055c4 <osMessageQueuePut+0xe4>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005574:	e01d      	b.n	80055b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <osMessageQueuePut+0xa2>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005582:	f06f 0303 	mvn.w	r3, #3
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
 8005588:	e014      	b.n	80055b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800558a:	2300      	movs	r3, #0
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	6a38      	ldr	r0, [r7, #32]
 8005592:	f000 fb75 	bl	8005c80 <xQueueGenericSend>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d00b      	beq.n	80055b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80055a2:	f06f 0301 	mvn.w	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a8:	e004      	b.n	80055b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80055aa:	f06f 0302 	mvn.w	r3, #2
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b0:	e000      	b.n	80055b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	@ 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200002a8 	.word	0x200002a8
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	@ 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055de:	f3ef 8305 	mrs	r3, IPSR
 80055e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80055e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ea:	f3ef 8310 	mrs	r3, PRIMASK
 80055ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <osMessageQueueGet+0x42>
 80055f6:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <osMessageQueueGet+0xdc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d12e      	bne.n	800565c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005602:	617b      	str	r3, [r7, #20]
  return(result);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d028      	beq.n	800565c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <osMessageQueueGet+0x54>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <osMessageQueueGet+0x54>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800561c:	f06f 0303 	mvn.w	r3, #3
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005622:	e038      	b.n	8005696 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	461a      	mov	r2, r3
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	6a38      	ldr	r0, [r7, #32]
 8005632:	f000 feb5 	bl	80063a0 <xQueueReceiveFromISR>
 8005636:	4603      	mov	r3, r0
 8005638:	2b01      	cmp	r3, #1
 800563a:	d003      	beq.n	8005644 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800563c:	f06f 0302 	mvn.w	r3, #2
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005642:	e028      	b.n	8005696 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d025      	beq.n	8005696 <osMessageQueueGet+0xce>
 800564a:	4b17      	ldr	r3, [pc, #92]	@ (80056a8 <osMessageQueueGet+0xe0>)
 800564c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800565a:	e01c      	b.n	8005696 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <osMessageQueueGet+0xa0>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005668:	f06f 0303 	mvn.w	r3, #3
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
 800566e:	e013      	b.n	8005698 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	6a38      	ldr	r0, [r7, #32]
 8005676:	f000 fca1 	bl	8005fbc <xQueueReceive>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d00b      	beq.n	8005698 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005686:	f06f 0301 	mvn.w	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
 800568c:	e004      	b.n	8005698 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800568e:	f06f 0302 	mvn.w	r3, #2
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	e000      	b.n	8005698 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005696:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	@ 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200002a8 	.word	0x200002a8
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a07      	ldr	r2, [pc, #28]	@ (80056d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80056bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a06      	ldr	r2, [pc, #24]	@ (80056dc <vApplicationGetIdleTaskMemory+0x30>)
 80056c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	200002ac 	.word	0x200002ac
 80056dc:	20000308 	.word	0x20000308

080056e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a07      	ldr	r2, [pc, #28]	@ (800570c <vApplicationGetTimerTaskMemory+0x2c>)
 80056f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a06      	ldr	r2, [pc, #24]	@ (8005710 <vApplicationGetTimerTaskMemory+0x30>)
 80056f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056fe:	601a      	str	r2, [r3, #0]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000508 	.word	0x20000508
 8005710:	20000564 	.word	0x20000564

08005714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f04f 32ff 	mov.w	r2, #4294967295
 800572c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 0208 	add.w	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d103      	bne.n	80057d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e00c      	b.n	80057f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3308      	adds	r3, #8
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e002      	b.n	80057e4 <vListInsert+0x2e>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d2f6      	bcs.n	80057de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6892      	ldr	r2, [r2, #8]
 800583e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d103      	bne.n	800585c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1e5a      	subs	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058a8:	f002 fbfe 	bl	80080a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	3b01      	subs	r3, #1
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	441a      	add	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	22ff      	movs	r2, #255	@ 0xff
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	22ff      	movs	r2, #255	@ 0xff
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d114      	bne.n	8005928 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01a      	beq.n	800593c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3310      	adds	r3, #16
 800590a:	4618      	mov	r0, r3
 800590c:	f001 fbb6 	bl	800707c <xTaskRemoveFromEventList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d012      	beq.n	800593c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005916:	4b0d      	ldr	r3, [pc, #52]	@ (800594c <xQueueGenericReset+0xd0>)
 8005918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	e009      	b.n	800593c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3310      	adds	r3, #16
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fef1 	bl	8005714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3324      	adds	r3, #36	@ 0x24
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff feec 	bl	8005714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800593c:	f002 fbe6 	bl	800810c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005940:	2301      	movs	r3, #1
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08e      	sub	sp, #56	@ 0x38
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <xQueueGenericCreateStatic+0x56>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <xQueueGenericCreateStatic+0x5a>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericCreateStatic+0x5c>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	623b      	str	r3, [r7, #32]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <xQueueGenericCreateStatic+0x84>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <xQueueGenericCreateStatic+0x88>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <xQueueGenericCreateStatic+0x8a>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059f6:	2350      	movs	r3, #80	@ 0x50
 80059f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b50      	cmp	r3, #80	@ 0x50
 80059fe:	d00b      	beq.n	8005a18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	61bb      	str	r3, [r7, #24]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a2a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f844 	bl	8005ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3730      	adds	r7, #48	@ 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	613b      	str	r3, [r7, #16]
}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	e7fd      	b.n	8005a70 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e004      	b.n	8005a8a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3350      	adds	r3, #80	@ 0x50
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 fc2c 	bl	80082ec <pvPortMalloc>
 8005a94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	3350      	adds	r3, #80	@ 0x50
 8005aa0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aaa:	79fa      	ldrb	r2, [r7, #7]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f805 	bl	8005ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005abc:	69bb      	ldr	r3, [r7, #24]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e002      	b.n	8005ae8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005af4:	2101      	movs	r1, #1
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f7ff fec0 	bl	800587c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8a4 	bl	8005c80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6939      	ldr	r1, [r7, #16]
 8005b58:	6978      	ldr	r0, [r7, #20]
 8005b5a:	f7ff ff75 	bl	8005a48 <xQueueGenericCreate>
 8005b5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff ffd3 	bl	8005b0c <prvInitialiseMutex>

		return pxNewQueue;
 8005b66:	68fb      	ldr	r3, [r7, #12]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	4603      	mov	r3, r0
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	6978      	ldr	r0, [r7, #20]
 8005b90:	f7ff fede 	bl	8005950 <xQueueGenericCreateStatic>
 8005b94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ffb8 	bl	8005b0c <prvInitialiseMutex>

		return pxNewQueue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005ba6:	b590      	push	{r4, r7, lr}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	60fb      	str	r3, [r7, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	e7fd      	b.n	8005bcc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	685c      	ldr	r4, [r3, #4]
 8005bd4:	f001 fc18 	bl	8007408 <xTaskGetCurrentTaskHandle>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d111      	bne.n	8005c02 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	1e5a      	subs	r2, r3, #1
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6938      	ldr	r0, [r7, #16]
 8005bf8:	f000 f842 	bl	8005c80 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e001      	b.n	8005c06 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c06:	697b      	ldr	r3, [r7, #20]
	}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}

08005c10 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685c      	ldr	r4, [r3, #4]
 8005c40:	f001 fbe2 	bl	8007408 <xTaskGetCurrentTaskHandle>
 8005c44:	4603      	mov	r3, r0
 8005c46:	429c      	cmp	r4, r3
 8005c48:	d107      	bne.n	8005c5a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e00c      	b.n	8005c74 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6938      	ldr	r0, [r7, #16]
 8005c5e:	f000 fa8f 	bl	8006180 <xQueueSemaphoreTake>
 8005c62:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c74:	697b      	ldr	r3, [r7, #20]
	}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}
	...

08005c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08e      	sub	sp, #56	@ 0x38
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xQueueGenericSend+0x34>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <xQueueGenericSend+0x42>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <xQueueGenericSend+0x46>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <xQueueGenericSend+0x48>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <xQueueGenericSend+0x64>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d103      	bne.n	8005cf2 <xQueueGenericSend+0x72>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <xQueueGenericSend+0x76>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <xQueueGenericSend+0x78>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <xQueueGenericSend+0x94>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	623b      	str	r3, [r7, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	e7fd      	b.n	8005d10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d14:	f001 fb88 	bl	8007428 <xTaskGetSchedulerState>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <xQueueGenericSend+0xa4>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <xQueueGenericSend+0xa8>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <xQueueGenericSend+0xaa>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <xQueueGenericSend+0xc6>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	61fb      	str	r3, [r7, #28]
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d46:	f002 f9af 	bl	80080a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <xQueueGenericSend+0xdc>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d129      	bne.n	8005db0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d62:	f000 fbb7 	bl	80064d4 <prvCopyDataToQueue>
 8005d66:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d010      	beq.n	8005d92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	3324      	adds	r3, #36	@ 0x24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f981 	bl	800707c <xTaskRemoveFromEventList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d80:	4b3f      	ldr	r3, [pc, #252]	@ (8005e80 <xQueueGenericSend+0x200>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e00a      	b.n	8005da8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b39      	ldr	r3, [pc, #228]	@ (8005e80 <xQueueGenericSend+0x200>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005da8:	f002 f9b0 	bl	800810c <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e063      	b.n	8005e78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f002 f9a9 	bl	800810c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e05c      	b.n	8005e78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f9bb 	bl	8007144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f002 f99b 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 ff25 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f002 f965 	bl	80080a8 <vPortEnterCritical>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d103      	bne.n	8005df4 <xQueueGenericSend+0x174>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSend+0x18a>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	f002 f97f 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f9aa 	bl	8007170 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d124      	bne.n	8005e6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e24:	f000 fc4e 	bl	80066c4 <prvIsQueueFull>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	3310      	adds	r3, #16
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 f8ce 	bl	8006fd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e3e:	f000 fbd9 	bl	80065f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fefd 	bl	8006c40 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f47f af7c 	bne.w	8005d46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e80 <xQueueGenericSend+0x200>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	e772      	b.n	8005d46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e62:	f000 fbc7 	bl	80065f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e66:	f000 feeb 	bl	8006c40 <xTaskResumeAll>
 8005e6a:	e76c      	b.n	8005d46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e6e:	f000 fbc1 	bl	80065f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e72:	f000 fee5 	bl	8006c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e76:	2300      	movs	r3, #0
		}
	}
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3738      	adds	r7, #56	@ 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	@ 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <xQueueGenericSendFromISR+0x3e>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x42>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <xQueueGenericSendFromISR+0x44>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	623b      	str	r3, [r7, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x6e>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <xQueueGenericSendFromISR+0x72>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueGenericSendFromISR+0x74>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61fb      	str	r3, [r7, #28]
}
 8005f0e:	bf00      	nop
 8005f10:	bf00      	nop
 8005f12:	e7fd      	b.n	8005f10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f14:	f002 f9a8 	bl	8008268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f18:	f3ef 8211 	mrs	r2, BASEPRI
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	61ba      	str	r2, [r7, #24]
 8005f2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <xQueueGenericSendFromISR+0xc2>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d12c      	bne.n	8005fa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f56:	f000 fabd 	bl	80064d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d112      	bne.n	8005f8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	3324      	adds	r3, #36	@ 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f883 	bl	800707c <xTaskRemoveFromEventList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00e      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e007      	b.n	8005f9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	b25a      	sxtb	r2, r3
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005f9e:	e001      	b.n	8005fa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3738      	adds	r7, #56	@ 0x38
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08c      	sub	sp, #48	@ 0x30
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <xQueueReceive+0x32>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	623b      	str	r3, [r7, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <xQueueReceive+0x40>
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <xQueueReceive+0x44>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <xQueueReceive+0x46>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <xQueueReceive+0x62>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	61fb      	str	r3, [r7, #28]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800601e:	f001 fa03 	bl	8007428 <xTaskGetSchedulerState>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <xQueueReceive+0x72>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <xQueueReceive+0x76>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <xQueueReceive+0x78>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <xQueueReceive+0x94>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61bb      	str	r3, [r7, #24]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006050:	f002 f82a 	bl	80080a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01f      	beq.n	80060a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006064:	f000 faa0 	bl	80065a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	3310      	adds	r3, #16
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fffd 	bl	800707c <xTaskRemoveFromEventList>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006088:	4b3c      	ldr	r3, [pc, #240]	@ (800617c <xQueueReceive+0x1c0>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006098:	f002 f838 	bl	800810c <vPortExitCritical>
				return pdPASS;
 800609c:	2301      	movs	r3, #1
 800609e:	e069      	b.n	8006174 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060a6:	f002 f831 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e062      	b.n	8006174 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f843 	bl	8007144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060c2:	f002 f823 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060c6:	f000 fdad 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060ca:	f001 ffed 	bl	80080a8 <vPortEnterCritical>
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d103      	bne.n	80060e4 <xQueueReceive+0x128>
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d103      	bne.n	80060fa <xQueueReceive+0x13e>
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060fa:	f002 f807 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060fe:	1d3a      	adds	r2, r7, #4
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	4611      	mov	r1, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f001 f832 	bl	8007170 <xTaskCheckForTimeOut>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d123      	bne.n	800615a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006114:	f000 fac0 	bl	8006698 <prvIsQueueEmpty>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	3324      	adds	r3, #36	@ 0x24
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ff56 	bl	8006fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800612c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612e:	f000 fa61 	bl	80065f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006132:	f000 fd85 	bl	8006c40 <xTaskResumeAll>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d189      	bne.n	8006050 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800613c:	4b0f      	ldr	r3, [pc, #60]	@ (800617c <xQueueReceive+0x1c0>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	e780      	b.n	8006050 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800614e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006150:	f000 fa50 	bl	80065f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006154:	f000 fd74 	bl	8006c40 <xTaskResumeAll>
 8006158:	e77a      	b.n	8006050 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800615a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615c:	f000 fa4a 	bl	80065f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006160:	f000 fd6e 	bl	8006c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006166:	f000 fa97 	bl	8006698 <prvIsQueueEmpty>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f43f af6f 	beq.w	8006050 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006172:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006174:	4618      	mov	r0, r3
 8006176:	3730      	adds	r7, #48	@ 0x30
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	@ 0x38
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800618a:	2300      	movs	r3, #0
 800618c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	61fb      	str	r3, [r7, #28]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d4:	f001 f928 	bl	8007428 <xTaskGetSchedulerState>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <xQueueSemaphoreTake+0x64>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <xQueueSemaphoreTake+0x68>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <xQueueSemaphoreTake+0x6a>
 80061e8:	2300      	movs	r3, #0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61bb      	str	r3, [r7, #24]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006206:	f001 ff4f 	bl	80080a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d024      	beq.n	8006260 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006226:	f001 fa83 	bl	8007730 <pvTaskIncrementMutexHeldCount>
 800622a:	4602      	mov	r2, r0
 800622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	3310      	adds	r3, #16
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ff1d 	bl	800707c <xTaskRemoveFromEventList>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b54      	ldr	r3, [pc, #336]	@ (800639c <xQueueSemaphoreTake+0x21c>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006258:	f001 ff58 	bl	800810c <vPortExitCritical>
				return pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	e098      	b.n	8006392 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d112      	bne.n	800628c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	617b      	str	r3, [r7, #20]
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006284:	f001 ff42 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006288:	2300      	movs	r3, #0
 800628a:	e082      	b.n	8006392 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ff54 	bl	8007144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a0:	f001 ff34 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062a4:	f000 fcbe 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a8:	f001 fefe 	bl	80080a8 <vPortEnterCritical>
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d103      	bne.n	80062c2 <xQueueSemaphoreTake+0x142>
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d103      	bne.n	80062d8 <xQueueSemaphoreTake+0x158>
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062d8:	f001 ff18 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062dc:	463a      	mov	r2, r7
 80062de:	f107 030c 	add.w	r3, r7, #12
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 ff43 	bl	8007170 <xTaskCheckForTimeOut>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d132      	bne.n	8006356 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f2:	f000 f9d1 	bl	8006698 <prvIsQueueEmpty>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d026      	beq.n	800634a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006304:	f001 fed0 	bl	80080a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	f001 f8a9 	bl	8007464 <xTaskPriorityInherit>
 8006312:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006314:	f001 fefa 	bl	800810c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	3324      	adds	r3, #36	@ 0x24
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fe59 	bl	8006fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006328:	f000 f964 	bl	80065f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800632c:	f000 fc88 	bl	8006c40 <xTaskResumeAll>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f47f af67 	bne.w	8006206 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006338:	4b18      	ldr	r3, [pc, #96]	@ (800639c <xQueueSemaphoreTake+0x21c>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	e75d      	b.n	8006206 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800634a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800634c:	f000 f952 	bl	80065f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006350:	f000 fc76 	bl	8006c40 <xTaskResumeAll>
 8006354:	e757      	b.n	8006206 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006356:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006358:	f000 f94c 	bl	80065f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635c:	f000 fc70 	bl	8006c40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006360:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006362:	f000 f999 	bl	8006698 <prvIsQueueEmpty>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	f43f af4c 	beq.w	8006206 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006374:	f001 fe98 	bl	80080a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006378:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800637a:	f000 f893 	bl	80064a4 <prvGetDisinheritPriorityAfterTimeout>
 800637e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f94a 	bl	8007620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800638c:	f001 febe 	bl	800810c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006392:	4618      	mov	r0, r3
 8006394:	3738      	adds	r7, #56	@ 0x38
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	@ 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	623b      	str	r3, [r7, #32]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <xQueueReceiveFromISR+0x3c>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <xQueueReceiveFromISR+0x40>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <xQueueReceiveFromISR+0x42>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61fb      	str	r3, [r7, #28]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063fe:	f001 ff33 	bl	8008268 <vPortValidateInterruptPriority>
	__asm volatile
 8006402:	f3ef 8211 	mrs	r2, BASEPRI
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	61ba      	str	r2, [r7, #24]
 8006418:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800641a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800641c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02f      	beq.n	800648a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006438:	f000 f8b6 	bl	80065a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006444:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d112      	bne.n	8006474 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	3310      	adds	r3, #16
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fe0e 	bl	800707c <xTaskRemoveFromEventList>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e007      	b.n	8006484 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006478:	3301      	adds	r3, #1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	b25a      	sxtb	r2, r3
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006484:	2301      	movs	r3, #1
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	e001      	b.n	800648e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800648a:	2300      	movs	r3, #0
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006490:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f383 8811 	msr	BASEPRI, r3
}
 8006498:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800649a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800649c:	4618      	mov	r0, r3
 800649e:	3738      	adds	r7, #56	@ 0x38
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e001      	b.n	80064c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064c6:	68fb      	ldr	r3, [r7, #12]
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d14d      	bne.n	8006596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 f81e 	bl	8007540 <xTaskPriorityDisinherit>
 8006504:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	e043      	b.n	8006596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d119      	bne.n	8006548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6898      	ldr	r0, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	461a      	mov	r2, r3
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	f002 f8f0 	bl	8008704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d32b      	bcc.n	8006596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	e026      	b.n	8006596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68d8      	ldr	r0, [r3, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	461a      	mov	r2, r3
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	f002 f8d6 	bl	8008704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	425b      	negs	r3, r3
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d207      	bcs.n	8006584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	425b      	negs	r3, r3
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d105      	bne.n	8006596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3b01      	subs	r3, #1
 8006594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800659e:	697b      	ldr	r3, [r7, #20]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d303      	bcc.n	80065dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68d9      	ldr	r1, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	461a      	mov	r2, r3
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f002 f88c 	bl	8008704 <memcpy>
	}
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065fc:	f001 fd54 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006608:	e011      	b.n	800662e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3324      	adds	r3, #36	@ 0x24
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fd30 	bl	800707c <xTaskRemoveFromEventList>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006622:	f000 fe09 	bl	8007238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3b01      	subs	r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dce9      	bgt.n	800660a <prvUnlockQueue+0x16>
 8006636:	e000      	b.n	800663a <prvUnlockQueue+0x46>
					break;
 8006638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006642:	f001 fd63 	bl	800810c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006646:	f001 fd2f 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006652:	e011      	b.n	8006678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d012      	beq.n	8006682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3310      	adds	r3, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fd0b 	bl	800707c <xTaskRemoveFromEventList>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800666c:	f000 fde4 	bl	8007238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	3b01      	subs	r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800667c:	2b00      	cmp	r3, #0
 800667e:	dce9      	bgt.n	8006654 <prvUnlockQueue+0x60>
 8006680:	e000      	b.n	8006684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	22ff      	movs	r2, #255	@ 0xff
 8006688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800668c:	f001 fd3e 	bl	800810c <vPortExitCritical>
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a0:	f001 fd02 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e001      	b.n	80066b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066b6:	f001 fd29 	bl	800810c <vPortExitCritical>

	return xReturn;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066cc:	f001 fcec 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	429a      	cmp	r2, r3
 80066da:	d102      	bne.n	80066e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e001      	b.n	80066e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066e6:	f001 fd11 	bl	800810c <vPortExitCritical>

	return xReturn;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e014      	b.n	800672e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006704:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <vQueueAddToRegistry+0x50>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006710:	490c      	ldr	r1, [pc, #48]	@ (8006744 <vQueueAddToRegistry+0x50>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800671a:	4a0a      	ldr	r2, [pc, #40]	@ (8006744 <vQueueAddToRegistry+0x50>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006726:	e006      	b.n	8006736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b07      	cmp	r3, #7
 8006732:	d9e7      	bls.n	8006704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000964 	.word	0x20000964

08006748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006758:	f001 fca6 	bl	80080a8 <vPortEnterCritical>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006762:	b25b      	sxtb	r3, r3
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d103      	bne.n	8006772 <vQueueWaitForMessageRestricted+0x2a>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <vQueueWaitForMessageRestricted+0x40>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006788:	f001 fcc0 	bl	800810c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3324      	adds	r3, #36	@ 0x24
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fc41 	bl	8007024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7ff ff26 	bl	80065f4 <prvUnlockQueue>
	}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	@ 0x38
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	623b      	str	r3, [r7, #32]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	61fb      	str	r3, [r7, #28]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067fa:	235c      	movs	r3, #92	@ 0x5c
 80067fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b5c      	cmp	r3, #92	@ 0x5c
 8006802:	d00b      	beq.n	800681c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	61bb      	str	r3, [r7, #24]
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01e      	beq.n	8006860 <xTaskCreateStatic+0xb0>
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01b      	beq.n	8006860 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	2202      	movs	r2, #2
 8006836:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800683a:	2300      	movs	r3, #0
 800683c:	9303      	str	r3, [sp, #12]
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	9302      	str	r3, [sp, #8]
 8006842:	f107 0314 	add.w	r3, r7, #20
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f850 	bl	80068f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800685a:	f000 f8d5 	bl	8006a08 <prvAddNewTaskToReadyList>
 800685e:	e001      	b.n	8006864 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006864:	697b      	ldr	r3, [r7, #20]
	}
 8006866:	4618      	mov	r0, r3
 8006868:	3728      	adds	r7, #40	@ 0x28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800686e:	b580      	push	{r7, lr}
 8006870:	b08c      	sub	sp, #48	@ 0x30
 8006872:	af04      	add	r7, sp, #16
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fd32 	bl	80082ec <pvPortMalloc>
 8006888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006890:	205c      	movs	r0, #92	@ 0x5c
 8006892:	f001 fd2b 	bl	80082ec <pvPortMalloc>
 8006896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a4:	e005      	b.n	80068b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f001 fde8 	bl	800847c <vPortFree>
 80068ac:	e001      	b.n	80068b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d017      	beq.n	80068e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068c0:	88fa      	ldrh	r2, [r7, #6]
 80068c2:	2300      	movs	r3, #0
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f80e 	bl	80068f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068dc:	69f8      	ldr	r0, [r7, #28]
 80068de:	f000 f893 	bl	8006a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e2:	2301      	movs	r3, #1
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e002      	b.n	80068ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068ee:	69bb      	ldr	r3, [r7, #24]
	}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	461a      	mov	r2, r3
 8006910:	21a5      	movs	r1, #165	@ 0xa5
 8006912:	f001 fecb 	bl	80086ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006920:	3b01      	subs	r3, #1
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	617b      	str	r3, [r7, #20]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e012      	b.n	800697e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	7819      	ldrb	r1, [r3, #0]
 8006960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	3334      	adds	r3, #52	@ 0x34
 8006968:	460a      	mov	r2, r1
 800696a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d9e9      	bls.n	8006958 <prvInitialiseNewTask+0x60>
 8006984:	e000      	b.n	8006988 <prvInitialiseNewTask+0x90>
		{
			break;
 8006986:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	2b37      	cmp	r3, #55	@ 0x37
 8006994:	d901      	bls.n	800699a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006996:	2337      	movs	r3, #55	@ 0x37
 8006998:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800699e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2200      	movs	r2, #0
 80069aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fecf 	bl	8005754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	3318      	adds	r3, #24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe feca 	bl	8005754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	69b8      	ldr	r0, [r7, #24]
 80069ea:	f001 fa29 	bl	8007e40 <pxPortInitialiseStack>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a00:	bf00      	nop
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a10:	f001 fb4a 	bl	80080a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a14:	4b2d      	ldr	r3, [pc, #180]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a26:	4a2a      	ldr	r2, [pc, #168]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a2c:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d110      	bne.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a34:	f000 fc24 	bl	8007280 <prvInitialiseTaskLists>
 8006a38:	e00d      	b.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ad4 <prvAddNewTaskToReadyList+0xcc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a42:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d802      	bhi.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a50:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a56:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006adc <prvAddNewTaskToReadyList+0xd4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <prvAddNewTaskToReadyList+0x74>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <prvAddNewTaskToReadyList+0xd4>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <prvAddNewTaskToReadyList+0xd8>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe fe6b 	bl	800576e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a98:	f001 fb38 	bl	800810c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <prvAddNewTaskToReadyList+0xcc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00e      	beq.n	8006ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d207      	bcs.n	8006ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <prvAddNewTaskToReadyList+0xdc>)
 8006ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000e78 	.word	0x20000e78
 8006ad0:	200009a4 	.word	0x200009a4
 8006ad4:	20000e84 	.word	0x20000e84
 8006ad8:	20000e94 	.word	0x20000e94
 8006adc:	20000e80 	.word	0x20000e80
 8006ae0:	200009a8 	.word	0x200009a8
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006afa:	4b14      	ldr	r3, [pc, #80]	@ (8006b4c <vTaskDelay+0x64>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <vTaskDelay+0x32>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60bb      	str	r3, [r7, #8]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b1a:	f000 f883 	bl	8006c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fe19 	bl	8007758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b26:	f000 f88b 	bl	8006c40 <xTaskResumeAll>
 8006b2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <vTaskDelay+0x68>)
 8006b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000ea0 	.word	0x20000ea0
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b62:	463a      	mov	r2, r7
 8006b64:	1d39      	adds	r1, r7, #4
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fd9e 	bl	80056ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	460a      	mov	r2, r1
 8006b82:	4922      	ldr	r1, [pc, #136]	@ (8006c0c <vTaskStartScheduler+0xb8>)
 8006b84:	4822      	ldr	r0, [pc, #136]	@ (8006c10 <vTaskStartScheduler+0xbc>)
 8006b86:	f7ff fe13 	bl	80067b0 <xTaskCreateStatic>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4a21      	ldr	r2, [pc, #132]	@ (8006c14 <vTaskStartScheduler+0xc0>)
 8006b8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b90:	4b20      	ldr	r3, [pc, #128]	@ (8006c14 <vTaskStartScheduler+0xc0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e001      	b.n	8006ba2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d102      	bne.n	8006bae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ba8:	f000 fe2a 	bl	8007800 <xTimerCreateTimerTask>
 8006bac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d116      	bne.n	8006be2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <vTaskStartScheduler+0xc4>)
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bd0:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <vTaskStartScheduler+0xc8>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bd6:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <vTaskStartScheduler+0xcc>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bdc:	f001 f9c0 	bl	8007f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006be0:	e00f      	b.n	8006c02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d10b      	bne.n	8006c02 <vTaskStartScheduler+0xae>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <vTaskStartScheduler+0xaa>
}
 8006c02:	bf00      	nop
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	080087cc 	.word	0x080087cc
 8006c10:	08007251 	.word	0x08007251
 8006c14:	20000e9c 	.word	0x20000e9c
 8006c18:	20000e98 	.word	0x20000e98
 8006c1c:	20000e84 	.word	0x20000e84
 8006c20:	20000e7c 	.word	0x20000e7c

08006c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a03      	ldr	r2, [pc, #12]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c30:	6013      	str	r3, [r2, #0]
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000ea0 	.word	0x20000ea0

08006c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c4e:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	603b      	str	r3, [r7, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c6e:	f001 fa1b 	bl	80080a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c72:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d162      	bne.n	8006d4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c84:	4b35      	ldr	r3, [pc, #212]	@ (8006d5c <xTaskResumeAll+0x11c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d05e      	beq.n	8006d4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c8c:	e02f      	b.n	8006cee <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c8e:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3318      	adds	r3, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fdc4 	bl	8005828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fdbf 	bl	8005828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4b2d      	ldr	r3, [pc, #180]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <xTaskResumeAll+0x7e>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a27      	ldr	r2, [pc, #156]	@ (8006d68 <xTaskResumeAll+0x128>)
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fe fd4a 	bl	800576e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4b23      	ldr	r3, [pc, #140]	@ (8006d6c <xTaskResumeAll+0x12c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d302      	bcc.n	8006cee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ce8:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cb      	bne.n	8006c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cfc:	f000 fb5e 	bl	80073bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d00:	4b1c      	ldr	r3, [pc, #112]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d0c:	f000 f846 	bl	8006d9c <xTaskIncrementTick>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d16:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f1      	bne.n	8006d0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006d28:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <xTaskResumeAll+0x138>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d4a:	f001 f9df 	bl	800810c <vPortExitCritical>

	return xAlreadyYielded;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000ea0 	.word	0x20000ea0
 8006d5c:	20000e78 	.word	0x20000e78
 8006d60:	20000e38 	.word	0x20000e38
 8006d64:	20000e80 	.word	0x20000e80
 8006d68:	200009a8 	.word	0x200009a8
 8006d6c:	200009a4 	.word	0x200009a4
 8006d70:	20000e8c 	.word	0x20000e8c
 8006d74:	20000e88 	.word	0x20000e88
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <xTaskGetTickCount+0x1c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d88:	687b      	ldr	r3, [r7, #4]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000e7c 	.word	0x20000e7c

08006d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da6:	4b52      	ldr	r3, [pc, #328]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 808f 	bne.w	8006ece <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006db0:	4b50      	ldr	r3, [pc, #320]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db8:	4a4e      	ldr	r2, [pc, #312]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d121      	bne.n	8006e08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskIncrementTick+0x46>
 8006de6:	4b44      	ldr	r3, [pc, #272]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4b43      	ldr	r3, [pc, #268]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a41      	ldr	r2, [pc, #260]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4a41      	ldr	r2, [pc, #260]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b41      	ldr	r3, [pc, #260]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a3f      	ldr	r2, [pc, #252]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	f000 fada 	bl	80073bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e08:	4b3e      	ldr	r3, [pc, #248]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d34e      	bcc.n	8006eb0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e12:	4b39      	ldr	r3, [pc, #228]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <xTaskIncrementTick+0x84>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <xTaskIncrementTick+0x86>
 8006e20:	2300      	movs	r3, #0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e26:	4b37      	ldr	r3, [pc, #220]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	601a      	str	r2, [r3, #0]
					break;
 8006e2e:	e03f      	b.n	8006eb0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e30:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d203      	bcs.n	8006e50 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e48:	4a2e      	ldr	r2, [pc, #184]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6013      	str	r3, [r2, #0]
						break;
 8006e4e:	e02f      	b.n	8006eb0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fce7 	bl	8005828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	3318      	adds	r3, #24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fcde 	bl	8005828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e70:	4b25      	ldr	r3, [pc, #148]	@ (8006f08 <xTaskIncrementTick+0x16c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d903      	bls.n	8006e80 <xTaskIncrementTick+0xe4>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	4a22      	ldr	r2, [pc, #136]	@ (8006f08 <xTaskIncrementTick+0x16c>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006e8e:	441a      	add	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7fe fc69 	bl	800576e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f10 <xTaskIncrementTick+0x174>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d3b3      	bcc.n	8006e12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eae:	e7b0      	b.n	8006e12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eb0:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <xTaskIncrementTick+0x174>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	4915      	ldr	r1, [pc, #84]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d907      	bls.n	8006ed8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e004      	b.n	8006ed8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ece:	4b11      	ldr	r3, [pc, #68]	@ (8006f14 <xTaskIncrementTick+0x178>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f14 <xTaskIncrementTick+0x178>)
 8006ed6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <xTaskIncrementTick+0x17c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ee4:	697b      	ldr	r3, [r7, #20]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000ea0 	.word	0x20000ea0
 8006ef4:	20000e7c 	.word	0x20000e7c
 8006ef8:	20000e30 	.word	0x20000e30
 8006efc:	20000e34 	.word	0x20000e34
 8006f00:	20000e90 	.word	0x20000e90
 8006f04:	20000e98 	.word	0x20000e98
 8006f08:	20000e80 	.word	0x20000e80
 8006f0c:	200009a8 	.word	0x200009a8
 8006f10:	200009a4 	.word	0x200009a4
 8006f14:	20000e88 	.word	0x20000e88
 8006f18:	20000e8c 	.word	0x20000e8c

08006f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f22:	4b28      	ldr	r3, [pc, #160]	@ (8006fc4 <vTaskSwitchContext+0xa8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f2a:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <vTaskSwitchContext+0xac>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f30:	e042      	b.n	8006fb8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f32:	4b25      	ldr	r3, [pc, #148]	@ (8006fc8 <vTaskSwitchContext+0xac>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f38:	4b24      	ldr	r3, [pc, #144]	@ (8006fcc <vTaskSwitchContext+0xb0>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e011      	b.n	8006f64 <vTaskSwitchContext+0x48>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <vTaskSwitchContext+0x42>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vTaskSwitchContext+0x3e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	491a      	ldr	r1, [pc, #104]	@ (8006fd0 <vTaskSwitchContext+0xb4>)
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0e3      	beq.n	8006f40 <vTaskSwitchContext+0x24>
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4a13      	ldr	r2, [pc, #76]	@ (8006fd0 <vTaskSwitchContext+0xb4>)
 8006f84:	4413      	add	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d104      	bne.n	8006fa8 <vTaskSwitchContext+0x8c>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	4a09      	ldr	r2, [pc, #36]	@ (8006fd4 <vTaskSwitchContext+0xb8>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4a06      	ldr	r2, [pc, #24]	@ (8006fcc <vTaskSwitchContext+0xb0>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000ea0 	.word	0x20000ea0
 8006fc8:	20000e8c 	.word	0x20000e8c
 8006fcc:	20000e80 	.word	0x20000e80
 8006fd0:	200009a8 	.word	0x200009a8
 8006fd4:	200009a4 	.word	0x200009a4

08006fd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60fb      	str	r3, [r7, #12]
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <vTaskPlaceOnEventList+0x48>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3318      	adds	r3, #24
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe fbd4 	bl	80057b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800700e:	2101      	movs	r1, #1
 8007010:	6838      	ldr	r0, [r7, #0]
 8007012:	f000 fba1 	bl	8007758 <prvAddCurrentTaskToDelayedList>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200009a4 	.word	0x200009a4

08007024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	617b      	str	r3, [r7, #20]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800704e:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <vTaskPlaceOnEventListRestricted+0x54>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3318      	adds	r3, #24
 8007054:	4619      	mov	r1, r3
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7fe fb89 	bl	800576e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007062:	f04f 33ff 	mov.w	r3, #4294967295
 8007066:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f000 fb74 	bl	8007758 <prvAddCurrentTaskToDelayedList>
	}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200009a4 	.word	0x200009a4

0800707c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60fb      	str	r3, [r7, #12]
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	3318      	adds	r3, #24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fbba 	bl	8005828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b4:	4b1d      	ldr	r3, [pc, #116]	@ (800712c <xTaskRemoveFromEventList+0xb0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d11d      	bne.n	80070f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fbb1 	bl	8005828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ca:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <xTaskRemoveFromEventList+0xb4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d903      	bls.n	80070da <xTaskRemoveFromEventList+0x5e>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	4a16      	ldr	r2, [pc, #88]	@ (8007130 <xTaskRemoveFromEventList+0xb4>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a13      	ldr	r2, [pc, #76]	@ (8007134 <xTaskRemoveFromEventList+0xb8>)
 80070e8:	441a      	add	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fe fb3c 	bl	800576e <vListInsertEnd>
 80070f6:	e005      	b.n	8007104 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	3318      	adds	r3, #24
 80070fc:	4619      	mov	r1, r3
 80070fe:	480e      	ldr	r0, [pc, #56]	@ (8007138 <xTaskRemoveFromEventList+0xbc>)
 8007100:	f7fe fb35 	bl	800576e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007108:	4b0c      	ldr	r3, [pc, #48]	@ (800713c <xTaskRemoveFromEventList+0xc0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	d905      	bls.n	800711e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <xTaskRemoveFromEventList+0xc4>)
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e001      	b.n	8007122 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007122:	697b      	ldr	r3, [r7, #20]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000ea0 	.word	0x20000ea0
 8007130:	20000e80 	.word	0x20000e80
 8007134:	200009a8 	.word	0x200009a8
 8007138:	20000e38 	.word	0x20000e38
 800713c:	200009a4 	.word	0x200009a4
 8007140:	20000e8c 	.word	0x20000e8c

08007144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <vTaskInternalSetTimeOutState+0x24>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007154:	4b05      	ldr	r3, [pc, #20]	@ (800716c <vTaskInternalSetTimeOutState+0x28>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000e90 	.word	0x20000e90
 800716c:	20000e7c 	.word	0x20000e7c

08007170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	613b      	str	r3, [r7, #16]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60fb      	str	r3, [r7, #12]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071b6:	f000 ff77 	bl	80080a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <xTaskCheckForTimeOut+0xc0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d102      	bne.n	80071da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	e023      	b.n	8007222 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b15      	ldr	r3, [pc, #84]	@ (8007234 <xTaskCheckForTimeOut+0xc4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d007      	beq.n	80071f6 <xTaskCheckForTimeOut+0x86>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d302      	bcc.n	80071f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	e015      	b.n	8007222 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d20b      	bcs.n	8007218 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ff99 	bl	8007144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e004      	b.n	8007222 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007222:	f000 ff73 	bl	800810c <vPortExitCritical>

	return xReturn;
 8007226:	69fb      	ldr	r3, [r7, #28]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000e7c 	.word	0x20000e7c
 8007234:	20000e90 	.word	0x20000e90

08007238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800723c:	4b03      	ldr	r3, [pc, #12]	@ (800724c <vTaskMissedYield+0x14>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	bf00      	nop
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000e8c 	.word	0x20000e8c

08007250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007258:	f000 f852 	bl	8007300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <prvIdleTask+0x28>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d9f9      	bls.n	8007258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007264:	4b05      	ldr	r3, [pc, #20]	@ (800727c <prvIdleTask+0x2c>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007274:	e7f0      	b.n	8007258 <prvIdleTask+0x8>
 8007276:	bf00      	nop
 8007278:	200009a8 	.word	0x200009a8
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007286:	2300      	movs	r3, #0
 8007288:	607b      	str	r3, [r7, #4]
 800728a:	e00c      	b.n	80072a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a12      	ldr	r2, [pc, #72]	@ (80072e0 <prvInitialiseTaskLists+0x60>)
 8007298:	4413      	add	r3, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fa3a 	bl	8005714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3301      	adds	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b37      	cmp	r3, #55	@ 0x37
 80072aa:	d9ef      	bls.n	800728c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072ac:	480d      	ldr	r0, [pc, #52]	@ (80072e4 <prvInitialiseTaskLists+0x64>)
 80072ae:	f7fe fa31 	bl	8005714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <prvInitialiseTaskLists+0x68>)
 80072b4:	f7fe fa2e 	bl	8005714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072b8:	480c      	ldr	r0, [pc, #48]	@ (80072ec <prvInitialiseTaskLists+0x6c>)
 80072ba:	f7fe fa2b 	bl	8005714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072be:	480c      	ldr	r0, [pc, #48]	@ (80072f0 <prvInitialiseTaskLists+0x70>)
 80072c0:	f7fe fa28 	bl	8005714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c4:	480b      	ldr	r0, [pc, #44]	@ (80072f4 <prvInitialiseTaskLists+0x74>)
 80072c6:	f7fe fa25 	bl	8005714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <prvInitialiseTaskLists+0x78>)
 80072cc:	4a05      	ldr	r2, [pc, #20]	@ (80072e4 <prvInitialiseTaskLists+0x64>)
 80072ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <prvInitialiseTaskLists+0x7c>)
 80072d2:	4a05      	ldr	r2, [pc, #20]	@ (80072e8 <prvInitialiseTaskLists+0x68>)
 80072d4:	601a      	str	r2, [r3, #0]
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200009a8 	.word	0x200009a8
 80072e4:	20000e08 	.word	0x20000e08
 80072e8:	20000e1c 	.word	0x20000e1c
 80072ec:	20000e38 	.word	0x20000e38
 80072f0:	20000e4c 	.word	0x20000e4c
 80072f4:	20000e64 	.word	0x20000e64
 80072f8:	20000e30 	.word	0x20000e30
 80072fc:	20000e34 	.word	0x20000e34

08007300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007306:	e019      	b.n	800733c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007308:	f000 fece 	bl	80080a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800730c:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <prvCheckTasksWaitingTermination+0x50>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fa85 	bl	8005828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <prvCheckTasksWaitingTermination+0x54>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3b01      	subs	r3, #1
 8007324:	4a0b      	ldr	r2, [pc, #44]	@ (8007354 <prvCheckTasksWaitingTermination+0x54>)
 8007326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <prvCheckTasksWaitingTermination+0x58>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3b01      	subs	r3, #1
 800732e:	4a0a      	ldr	r2, [pc, #40]	@ (8007358 <prvCheckTasksWaitingTermination+0x58>)
 8007330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007332:	f000 feeb 	bl	800810c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f810 	bl	800735c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800733c:	4b06      	ldr	r3, [pc, #24]	@ (8007358 <prvCheckTasksWaitingTermination+0x58>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e1      	bne.n	8007308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000e4c 	.word	0x20000e4c
 8007354:	20000e78 	.word	0x20000e78
 8007358:	20000e60 	.word	0x20000e60

0800735c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800736a:	2b00      	cmp	r3, #0
 800736c:	d108      	bne.n	8007380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f882 	bl	800847c <vPortFree>
				vPortFree( pxTCB );
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 f87f 	bl	800847c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800737e:	e019      	b.n	80073b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007386:	2b01      	cmp	r3, #1
 8007388:	d103      	bne.n	8007392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f876 	bl	800847c <vPortFree>
	}
 8007390:	e010      	b.n	80073b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007398:	2b02      	cmp	r3, #2
 800739a:	d00b      	beq.n	80073b4 <prvDeleteTCB+0x58>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	e7fd      	b.n	80073b0 <prvDeleteTCB+0x54>
	}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <prvResetNextTaskUnblockTime+0x44>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <prvResetNextTaskUnblockTime+0x14>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e000      	b.n	80073d2 <prvResetNextTaskUnblockTime+0x16>
 80073d0:	2300      	movs	r3, #0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <prvResetNextTaskUnblockTime+0x48>)
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073de:	e008      	b.n	80073f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073e0:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <prvResetNextTaskUnblockTime+0x44>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4a05      	ldr	r2, [pc, #20]	@ (8007404 <prvResetNextTaskUnblockTime+0x48>)
 80073f0:	6013      	str	r3, [r2, #0]
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000e30 	.word	0x20000e30
 8007404:	20000e98 	.word	0x20000e98

08007408 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800740e:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <xTaskGetCurrentTaskHandle+0x1c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007414:	687b      	ldr	r3, [r7, #4]
	}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200009a4 	.word	0x200009a4

08007428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800742e:	4b0b      	ldr	r3, [pc, #44]	@ (800745c <xTaskGetSchedulerState+0x34>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007436:	2301      	movs	r3, #1
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	e008      	b.n	800744e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800743c:	4b08      	ldr	r3, [pc, #32]	@ (8007460 <xTaskGetSchedulerState+0x38>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d102      	bne.n	800744a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007444:	2302      	movs	r3, #2
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	e001      	b.n	800744e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800744e:	687b      	ldr	r3, [r7, #4]
	}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20000e84 	.word	0x20000e84
 8007460:	20000ea0 	.word	0x20000ea0

08007464 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d056      	beq.n	8007528 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747e:	4b2d      	ldr	r3, [pc, #180]	@ (8007534 <xTaskPriorityInherit+0xd0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	429a      	cmp	r2, r3
 8007486:	d246      	bcs.n	8007516 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	db06      	blt.n	800749e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	4b28      	ldr	r3, [pc, #160]	@ (8007534 <xTaskPriorityInherit+0xd0>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6959      	ldr	r1, [r3, #20]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a22      	ldr	r2, [pc, #136]	@ (8007538 <xTaskPriorityInherit+0xd4>)
 80074b0:	4413      	add	r3, r2
 80074b2:	4299      	cmp	r1, r3
 80074b4:	d101      	bne.n	80074ba <xTaskPriorityInherit+0x56>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <xTaskPriorityInherit+0x58>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d022      	beq.n	8007506 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe f9af 	bl	8005828 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007534 <xTaskPriorityInherit+0xd0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d8:	4b18      	ldr	r3, [pc, #96]	@ (800753c <xTaskPriorityInherit+0xd8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d903      	bls.n	80074e8 <xTaskPriorityInherit+0x84>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a15      	ldr	r2, [pc, #84]	@ (800753c <xTaskPriorityInherit+0xd8>)
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4a10      	ldr	r2, [pc, #64]	@ (8007538 <xTaskPriorityInherit+0xd4>)
 80074f6:	441a      	add	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fe f935 	bl	800576e <vListInsertEnd>
 8007504:	e004      	b.n	8007510 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007506:	4b0b      	ldr	r3, [pc, #44]	@ (8007534 <xTaskPriorityInherit+0xd0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e008      	b.n	8007528 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800751a:	4b06      	ldr	r3, [pc, #24]	@ (8007534 <xTaskPriorityInherit+0xd0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d201      	bcs.n	8007528 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007528:	68fb      	ldr	r3, [r7, #12]
	}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200009a4 	.word	0x200009a4
 8007538:	200009a8 	.word	0x200009a8
 800753c:	20000e80 	.word	0x20000e80

08007540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d058      	beq.n	8007608 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007556:	4b2f      	ldr	r3, [pc, #188]	@ (8007614 <xTaskPriorityDisinherit+0xd4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d00b      	beq.n	8007578 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60bb      	str	r3, [r7, #8]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d02c      	beq.n	8007608 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d128      	bne.n	8007608 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe f934 	bl	8005828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007618 <xTaskPriorityDisinherit+0xd8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d903      	bls.n	80075e8 <xTaskPriorityDisinherit+0xa8>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007618 <xTaskPriorityDisinherit+0xd8>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a09      	ldr	r2, [pc, #36]	@ (800761c <xTaskPriorityDisinherit+0xdc>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe f8b5 	bl	800576e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200009a4 	.word	0x200009a4
 8007618:	20000e80 	.word	0x20000e80
 800761c:	200009a8 	.word	0x200009a8

08007620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d071      	beq.n	800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	e7fd      	b.n	8007654 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d902      	bls.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e002      	b.n	800766e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800766c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	429a      	cmp	r2, r3
 8007676:	d051      	beq.n	800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	429a      	cmp	r2, r3
 8007680:	d14c      	bne.n	800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007682:	4b28      	ldr	r3, [pc, #160]	@ (8007724 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d10b      	bne.n	80076a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	60bb      	str	r3, [r7, #8]
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	e7fd      	b.n	80076a0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	db04      	blt.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	6959      	ldr	r1, [r3, #20]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4a15      	ldr	r2, [pc, #84]	@ (8007728 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80076d2:	4413      	add	r3, r2
 80076d4:	4299      	cmp	r1, r3
 80076d6:	d101      	bne.n	80076dc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01c      	beq.n	800771c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe f89e 	bl	8005828 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f0:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d903      	bls.n	8007700 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	4a0b      	ldr	r2, [pc, #44]	@ (800772c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4a06      	ldr	r2, [pc, #24]	@ (8007728 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800770e:	441a      	add	r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	3304      	adds	r3, #4
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7fe f829 	bl	800576e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800771c:	bf00      	nop
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200009a4 	.word	0x200009a4
 8007728:	200009a8 	.word	0x200009a8
 800772c:	20000e80 	.word	0x20000e80

08007730 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007734:	4b07      	ldr	r3, [pc, #28]	@ (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800773c:	4b05      	ldr	r3, [pc, #20]	@ (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007742:	3201      	adds	r2, #1
 8007744:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007746:	4b03      	ldr	r3, [pc, #12]	@ (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 8007748:	681b      	ldr	r3, [r3, #0]
	}
 800774a:	4618      	mov	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	200009a4 	.word	0x200009a4

08007758 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007762:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007768:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f85a 	bl	8005828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d10a      	bne.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007782:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4819      	ldr	r0, [pc, #100]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800778c:	f7fd ffef 	bl	800576e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007790:	e026      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4413      	add	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800779a:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d209      	bcs.n	80077be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077aa:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fd fffd 	bl	80057b6 <vListInsert>
}
 80077bc:	e010      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fd fff3 	bl	80057b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077d0:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d202      	bcs.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077da:	4a08      	ldr	r2, [pc, #32]	@ (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000e7c 	.word	0x20000e7c
 80077ec:	200009a4 	.word	0x200009a4
 80077f0:	20000e64 	.word	0x20000e64
 80077f4:	20000e34 	.word	0x20000e34
 80077f8:	20000e30 	.word	0x20000e30
 80077fc:	20000e98 	.word	0x20000e98

08007800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	@ 0x28
 8007804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800780a:	f000 fad9 	bl	8007dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800780e:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <xTimerCreateTimerTask+0x84>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d021      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800781e:	1d3a      	adds	r2, r7, #4
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f7fd ff59 	bl	80056e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	9202      	str	r2, [sp, #8]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	2302      	movs	r3, #2
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	460a      	mov	r2, r1
 8007840:	4911      	ldr	r1, [pc, #68]	@ (8007888 <xTimerCreateTimerTask+0x88>)
 8007842:	4812      	ldr	r0, [pc, #72]	@ (800788c <xTimerCreateTimerTask+0x8c>)
 8007844:	f7fe ffb4 	bl	80067b0 <xTaskCreateStatic>
 8007848:	4603      	mov	r3, r0
 800784a:	4a11      	ldr	r2, [pc, #68]	@ (8007890 <xTimerCreateTimerTask+0x90>)
 800784c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <xTimerCreateTimerTask+0x90>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	613b      	str	r3, [r7, #16]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000ed4 	.word	0x20000ed4
 8007888:	080087d4 	.word	0x080087d4
 800788c:	080079b5 	.word	0x080079b5
 8007890:	20000ed8 	.word	0x20000ed8

08007894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	@ 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	623b      	str	r3, [r7, #32]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078c4:	4b19      	ldr	r3, [pc, #100]	@ (800792c <xTimerGenericCommand+0x98>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02a      	beq.n	8007922 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b05      	cmp	r3, #5
 80078dc:	dc18      	bgt.n	8007910 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078de:	f7ff fda3 	bl	8007428 <xTaskGetSchedulerState>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d109      	bne.n	80078fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078e8:	4b10      	ldr	r3, [pc, #64]	@ (800792c <xTimerGenericCommand+0x98>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	f107 0110 	add.w	r1, r7, #16
 80078f0:	2300      	movs	r3, #0
 80078f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f4:	f7fe f9c4 	bl	8005c80 <xQueueGenericSend>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80078fa:	e012      	b.n	8007922 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <xTimerGenericCommand+0x98>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	f107 0110 	add.w	r1, r7, #16
 8007904:	2300      	movs	r3, #0
 8007906:	2200      	movs	r2, #0
 8007908:	f7fe f9ba 	bl	8005c80 <xQueueGenericSend>
 800790c:	6278      	str	r0, [r7, #36]	@ 0x24
 800790e:	e008      	b.n	8007922 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <xTimerGenericCommand+0x98>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	f107 0110 	add.w	r1, r7, #16
 8007918:	2300      	movs	r3, #0
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	f7fe fab2 	bl	8005e84 <xQueueGenericSendFromISR>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000ed4 	.word	0x20000ed4

08007930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800793a:	4b1d      	ldr	r3, [pc, #116]	@ (80079b0 <prvProcessExpiredTimer+0x80>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	3304      	adds	r3, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd ff6d 	bl	8005828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d123      	bne.n	800799e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	18d1      	adds	r1, r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	6978      	ldr	r0, [r7, #20]
 8007964:	f000 f8cc 	bl	8007b00 <prvInsertTimerInActiveList>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d017      	beq.n	800799e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800796e:	2300      	movs	r3, #0
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	2100      	movs	r1, #0
 8007978:	6978      	ldr	r0, [r7, #20]
 800797a:	f7ff ff8b 	bl	8007894 <xTimerGenericCommand>
 800797e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60fb      	str	r3, [r7, #12]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	6978      	ldr	r0, [r7, #20]
 80079a4:	4798      	blx	r3
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000ecc 	.word	0x20000ecc

080079b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079bc:	f107 0308 	add.w	r3, r7, #8
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f859 	bl	8007a78 <prvGetNextExpireTime>
 80079c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4619      	mov	r1, r3
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f805 	bl	80079dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079d2:	f000 f8d7 	bl	8007b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d6:	bf00      	nop
 80079d8:	e7f0      	b.n	80079bc <prvTimerTask+0x8>
	...

080079dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079e6:	f7ff f91d 	bl	8006c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f866 	bl	8007ac0 <prvSampleTimeNow>
 80079f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d130      	bne.n	8007a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <prvProcessTimerOrBlockTask+0x3c>
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d806      	bhi.n	8007a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a0a:	f7ff f919 	bl	8006c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ff8d 	bl	8007930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a16:	e024      	b.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d008      	beq.n	8007a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a1e:	4b13      	ldr	r3, [pc, #76]	@ (8007a6c <prvProcessTimerOrBlockTask+0x90>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a30:	4b0f      	ldr	r3, [pc, #60]	@ (8007a70 <prvProcessTimerOrBlockTask+0x94>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7fe fe83 	bl	8006748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a42:	f7ff f8fd 	bl	8006c40 <xTaskResumeAll>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a4c:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <prvProcessTimerOrBlockTask+0x98>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
}
 8007a5c:	e001      	b.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a5e:	f7ff f8ef 	bl	8006c40 <xTaskResumeAll>
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000ed0 	.word	0x20000ed0
 8007a70:	20000ed4 	.word	0x20000ed4
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a80:	4b0e      	ldr	r3, [pc, #56]	@ (8007abc <prvGetNextExpireTime+0x44>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bf0c      	ite	eq
 8007a8a:	2301      	moveq	r3, #1
 8007a8c:	2300      	movne	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a9e:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <prvGetNextExpireTime+0x44>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e001      	b.n	8007aae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	20000ecc 	.word	0x20000ecc

08007ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ac8:	f7ff f958 	bl	8006d7c <xTaskGetTickCount>
 8007acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ace:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <prvSampleTimeNow+0x3c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d205      	bcs.n	8007ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ad8:	f000 f910 	bl	8007cfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007aea:	4a04      	ldr	r2, [pc, #16]	@ (8007afc <prvSampleTimeNow+0x3c>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000edc 	.word	0x20000edc

08007b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d812      	bhi.n	8007b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e01b      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b3a:	4b10      	ldr	r3, [pc, #64]	@ (8007b7c <prvInsertTimerInActiveList+0x7c>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7fd fe36 	bl	80057b6 <vListInsert>
 8007b4a:	e012      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d206      	bcs.n	8007b62 <prvInsertTimerInActiveList+0x62>
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d302      	bcc.n	8007b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e007      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b62:	4b07      	ldr	r3, [pc, #28]	@ (8007b80 <prvInsertTimerInActiveList+0x80>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fd fe22 	bl	80057b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b72:	697b      	ldr	r3, [r7, #20]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000ed0 	.word	0x20000ed0
 8007b80:	20000ecc 	.word	0x20000ecc

08007b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08e      	sub	sp, #56	@ 0x38
 8007b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b8a:	e0a5      	b.n	8007cd8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da19      	bge.n	8007bc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	3304      	adds	r3, #4
 8007b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61fb      	str	r3, [r7, #28]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bbc:	6850      	ldr	r0, [r2, #4]
 8007bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc0:	6892      	ldr	r2, [r2, #8]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f2c0 8085 	blt.w	8007cd8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fd fe22 	bl	8005828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007be4:	463b      	mov	r3, r7
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff ff6a 	bl	8007ac0 <prvSampleTimeNow>
 8007bec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d86c      	bhi.n	8007cce <prvProcessReceivedCommands+0x14a>
 8007bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <prvProcessReceivedCommands+0x78>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007ccf 	.word	0x08007ccf
 8007c0c:	08007c83 	.word	0x08007c83
 8007c10:	08007cbd 	.word	0x08007cbd
 8007c14:	08007c25 	.word	0x08007c25
 8007c18:	08007c25 	.word	0x08007c25
 8007c1c:	08007ccf 	.word	0x08007ccf
 8007c20:	08007c83 	.word	0x08007c83
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	18d1      	adds	r1, r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c32:	f7ff ff65 	bl	8007b00 <prvInsertTimerInActiveList>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d04a      	beq.n	8007cd2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d142      	bne.n	8007cd2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	441a      	add	r2, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c5e:	f7ff fe19 	bl	8007894 <xTimerGenericCommand>
 8007c62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d133      	bne.n	8007cd2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	61bb      	str	r3, [r7, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10b      	bne.n	8007ca8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	617b      	str	r3, [r7, #20]
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	699a      	ldr	r2, [r3, #24]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	18d1      	adds	r1, r2, r3
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb6:	f7ff ff23 	bl	8007b00 <prvInsertTimerInActiveList>
					break;
 8007cba:	e00d      	b.n	8007cd8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc8:	f000 fbd8 	bl	800847c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ccc:	e003      	b.n	8007cd6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007cce:	bf00      	nop
 8007cd0:	e002      	b.n	8007cd8 <prvProcessReceivedCommands+0x154>
					break;
 8007cd2:	bf00      	nop
 8007cd4:	e000      	b.n	8007cd8 <prvProcessReceivedCommands+0x154>
					break;
 8007cd6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cd8:	4b07      	ldr	r3, [pc, #28]	@ (8007cf8 <prvProcessReceivedCommands+0x174>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	1d39      	adds	r1, r7, #4
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe f96b 	bl	8005fbc <xQueueReceive>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af4f 	bne.w	8007b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	3730      	adds	r7, #48	@ 0x30
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000ed4 	.word	0x20000ed4

08007cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d02:	e046      	b.n	8007d92 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d04:	4b2c      	ldr	r3, [pc, #176]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd fd83 	bl	8005828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d12f      	bne.n	8007d92 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d90e      	bls.n	8007d62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fd fd2b 	bl	80057b6 <vListInsert>
 8007d60:	e017      	b.n	8007d92 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d62:	2300      	movs	r3, #0
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fd91 	bl	8007894 <xTimerGenericCommand>
 8007d72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <prvSwitchTimerLists+0x96>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	603b      	str	r3, [r7, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	e7fd      	b.n	8007d8e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d92:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1b3      	bne.n	8007d04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007da2:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <prvSwitchTimerLists+0xc0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a04      	ldr	r2, [pc, #16]	@ (8007db8 <prvSwitchTimerLists+0xbc>)
 8007da8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007daa:	4a04      	ldr	r2, [pc, #16]	@ (8007dbc <prvSwitchTimerLists+0xc0>)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	6013      	str	r3, [r2, #0]
}
 8007db0:	bf00      	nop
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000ecc 	.word	0x20000ecc
 8007dbc:	20000ed0 	.word	0x20000ed0

08007dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dc6:	f000 f96f 	bl	80080a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dca:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d120      	bne.n	8007e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dd2:	4814      	ldr	r0, [pc, #80]	@ (8007e24 <prvCheckForValidListAndQueue+0x64>)
 8007dd4:	f7fd fc9e 	bl	8005714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dd8:	4813      	ldr	r0, [pc, #76]	@ (8007e28 <prvCheckForValidListAndQueue+0x68>)
 8007dda:	f7fd fc9b 	bl	8005714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dde:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <prvCheckForValidListAndQueue+0x6c>)
 8007de0:	4a10      	ldr	r2, [pc, #64]	@ (8007e24 <prvCheckForValidListAndQueue+0x64>)
 8007de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007de4:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <prvCheckForValidListAndQueue+0x70>)
 8007de6:	4a10      	ldr	r2, [pc, #64]	@ (8007e28 <prvCheckForValidListAndQueue+0x68>)
 8007de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dea:	2300      	movs	r3, #0
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <prvCheckForValidListAndQueue+0x74>)
 8007df0:	4a11      	ldr	r2, [pc, #68]	@ (8007e38 <prvCheckForValidListAndQueue+0x78>)
 8007df2:	2110      	movs	r1, #16
 8007df4:	200a      	movs	r0, #10
 8007df6:	f7fd fdab 	bl	8005950 <xQueueGenericCreateStatic>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4a08      	ldr	r2, [pc, #32]	@ (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e00:	4b07      	ldr	r3, [pc, #28]	@ (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	490b      	ldr	r1, [pc, #44]	@ (8007e3c <prvCheckForValidListAndQueue+0x7c>)
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fc70 	bl	80066f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e14:	f000 f97a 	bl	800810c <vPortExitCritical>
}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000ed4 	.word	0x20000ed4
 8007e24:	20000ea4 	.word	0x20000ea4
 8007e28:	20000eb8 	.word	0x20000eb8
 8007e2c:	20000ecc 	.word	0x20000ecc
 8007e30:	20000ed0 	.word	0x20000ed0
 8007e34:	20000f80 	.word	0x20000f80
 8007e38:	20000ee0 	.word	0x20000ee0
 8007e3c:	080087dc 	.word	0x080087dc

08007e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3b04      	subs	r3, #4
 8007e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea4 <pxPortInitialiseStack+0x64>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3b14      	subs	r3, #20
 8007e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f06f 0202 	mvn.w	r2, #2
 8007e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3b20      	subs	r3, #32
 8007e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e96:	68fb      	ldr	r3, [r7, #12]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	08007ea9 	.word	0x08007ea9

08007ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eb2:	4b13      	ldr	r3, [pc, #76]	@ (8007f00 <prvTaskExitError+0x58>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d00b      	beq.n	8007ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60fb      	str	r3, [r7, #12]
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <prvTaskExitError+0x28>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60bb      	str	r3, [r7, #8]
}
 8007ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ee8:	bf00      	nop
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0fc      	beq.n	8007eea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000010 	.word	0x20000010
	...

08007f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	200009a4 	.word	0x200009a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f38:	4808      	ldr	r0, [pc, #32]	@ (8007f5c <prvPortStartFirstTask+0x24>)
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f380 8808 	msr	MSP, r0
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8814 	msr	CONTROL, r0
 8007f4a:	b662      	cpsie	i
 8007f4c:	b661      	cpsie	f
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	df00      	svc	0
 8007f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f5a:	bf00      	nop
 8007f5c:	e000ed08 	.word	0xe000ed08

08007f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f66:	4b47      	ldr	r3, [pc, #284]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a47      	ldr	r2, [pc, #284]	@ (8008088 <xPortStartScheduler+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10b      	bne.n	8007f88 <xPortStartScheduler+0x28>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	613b      	str	r3, [r7, #16]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f88:	4b3e      	ldr	r3, [pc, #248]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800808c <xPortStartScheduler+0x12c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10b      	bne.n	8007faa <xPortStartScheduler+0x4a>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	60fb      	str	r3, [r7, #12]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <xPortStartScheduler+0x130>)
 8007fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	22ff      	movs	r2, #255	@ 0xff
 8007fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b31      	ldr	r3, [pc, #196]	@ (8008094 <xPortStartScheduler+0x134>)
 8007fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fd2:	4b31      	ldr	r3, [pc, #196]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd8:	e009      	b.n	8007fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007fda:	4b2f      	ldr	r3, [pc, #188]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b80      	cmp	r3, #128	@ 0x80
 8007ff8:	d0ef      	beq.n	8007fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <xPortStartScheduler+0x138>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f1c3 0307 	rsb	r3, r3, #7
 8008002:	2b04      	cmp	r3, #4
 8008004:	d00b      	beq.n	800801e <xPortStartScheduler+0xbe>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60bb      	str	r3, [r7, #8]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800801e:	4b1e      	ldr	r3, [pc, #120]	@ (8008098 <xPortStartScheduler+0x138>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	4a1c      	ldr	r2, [pc, #112]	@ (8008098 <xPortStartScheduler+0x138>)
 8008026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008028:	4b1b      	ldr	r3, [pc, #108]	@ (8008098 <xPortStartScheduler+0x138>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008030:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <xPortStartScheduler+0x138>)
 8008032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	b2da      	uxtb	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800803c:	4b17      	ldr	r3, [pc, #92]	@ (800809c <xPortStartScheduler+0x13c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a16      	ldr	r2, [pc, #88]	@ (800809c <xPortStartScheduler+0x13c>)
 8008042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008048:	4b14      	ldr	r3, [pc, #80]	@ (800809c <xPortStartScheduler+0x13c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a13      	ldr	r2, [pc, #76]	@ (800809c <xPortStartScheduler+0x13c>)
 800804e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008054:	f000 f8da 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008058:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <xPortStartScheduler+0x140>)
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800805e:	f000 f8f9 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a0f      	ldr	r2, [pc, #60]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800806e:	f7ff ff63 	bl	8007f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008072:	f7fe ff53 	bl	8006f1c <vTaskSwitchContext>
	prvTaskExitError();
 8008076:	f7ff ff17 	bl	8007ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed00 	.word	0xe000ed00
 8008088:	410fc271 	.word	0x410fc271
 800808c:	410fc270 	.word	0x410fc270
 8008090:	e000e400 	.word	0xe000e400
 8008094:	20000fd0 	.word	0x20000fd0
 8008098:	20000fd4 	.word	0x20000fd4
 800809c:	e000ed20 	.word	0xe000ed20
 80080a0:	20000010 	.word	0x20000010
 80080a4:	e000ef34 	.word	0xe000ef34

080080a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <vPortEnterCritical+0x60>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vPortEnterCritical+0x4a>
	}
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000010 	.word	0x20000010
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008112:	4b12      	ldr	r3, [pc, #72]	@ (800815c <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vPortExitCritical+0x26>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008132:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	4a08      	ldr	r2, [pc, #32]	@ (800815c <vPortExitCritical+0x50>)
 800813a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <vPortExitCritical+0x50>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <vPortExitCritical+0x44>
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20000010 	.word	0x20000010

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008184:	f380 8811 	msr	BASEPRI, r0
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f7fe fec4 	bl	8006f1c <vTaskSwitchContext>
 8008194:	f04f 0000 	mov.w	r0, #0
 8008198:	f380 8811 	msr	BASEPRI, r0
 800819c:	bc09      	pop	{r0, r3}
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	f01e 0f10 	tst.w	lr, #16
 80081aa:	bf08      	it	eq
 80081ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b0:	f380 8809 	msr	PSP, r0
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst>:
 80081c0:	200009a4 	.word	0x200009a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7fe fddb 	bl	8006d9c <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <SysTick_Handler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	@ (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	@ (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	20000004 	.word	0x20000004
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800826e:	f3ef 8305 	mrs	r3, IPSR
 8008272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d915      	bls.n	80082a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800827a:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <vPortValidateInterruptPriority+0x74>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008284:	4b16      	ldr	r3, [pc, #88]	@ (80082e0 <vPortValidateInterruptPriority+0x78>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	429a      	cmp	r2, r3
 800828c:	d20b      	bcs.n	80082a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082a6:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <vPortValidateInterruptPriority+0x7c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082ae:	4b0e      	ldr	r3, [pc, #56]	@ (80082e8 <vPortValidateInterruptPriority+0x80>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d90b      	bls.n	80082ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <vPortValidateInterruptPriority+0x62>
	}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	e000e3f0 	.word	0xe000e3f0
 80082e0:	20000fd0 	.word	0x20000fd0
 80082e4:	e000ed0c 	.word	0xe000ed0c
 80082e8:	20000fd4 	.word	0x20000fd4

080082ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082f8:	f7fe fc94 	bl	8006c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008468 <pvPortMalloc+0x17c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008304:	f000 f916 	bl	8008534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008308:	4b58      	ldr	r3, [pc, #352]	@ (800846c <pvPortMalloc+0x180>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 8090 	bne.w	8008436 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01e      	beq.n	800835a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800831c:	2208      	movs	r2, #8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d015      	beq.n	800835a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	3308      	adds	r3, #8
 8008336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <pvPortMalloc+0x6e>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d06a      	beq.n	8008436 <pvPortMalloc+0x14a>
 8008360:	4b43      	ldr	r3, [pc, #268]	@ (8008470 <pvPortMalloc+0x184>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	d865      	bhi.n	8008436 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800836a:	4b42      	ldr	r3, [pc, #264]	@ (8008474 <pvPortMalloc+0x188>)
 800836c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800836e:	4b41      	ldr	r3, [pc, #260]	@ (8008474 <pvPortMalloc+0x188>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008374:	e004      	b.n	8008380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <pvPortMalloc+0xa6>
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f1      	bne.n	8008376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008392:	4b35      	ldr	r3, [pc, #212]	@ (8008468 <pvPortMalloc+0x17c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008398:	429a      	cmp	r2, r3
 800839a:	d04c      	beq.n	8008436 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2208      	movs	r2, #8
 80083a2:	4413      	add	r3, r2
 80083a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	2308      	movs	r3, #8
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d920      	bls.n	8008400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4413      	add	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <pvPortMalloc+0xfc>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f000 f8fc 	bl	80085f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008400:	4b1b      	ldr	r3, [pc, #108]	@ (8008470 <pvPortMalloc+0x184>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	4a19      	ldr	r2, [pc, #100]	@ (8008470 <pvPortMalloc+0x184>)
 800840c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800840e:	4b18      	ldr	r3, [pc, #96]	@ (8008470 <pvPortMalloc+0x184>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b19      	ldr	r3, [pc, #100]	@ (8008478 <pvPortMalloc+0x18c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d203      	bcs.n	8008422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800841a:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <pvPortMalloc+0x184>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a16      	ldr	r2, [pc, #88]	@ (8008478 <pvPortMalloc+0x18c>)
 8008420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <pvPortMalloc+0x180>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	431a      	orrs	r2, r3
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008436:	f7fe fc03 	bl	8006c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <pvPortMalloc+0x170>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60fb      	str	r3, [r7, #12]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <pvPortMalloc+0x16c>
	return pvReturn;
 800845c:	69fb      	ldr	r3, [r7, #28]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	@ 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	2000255c 	.word	0x2000255c
 800846c:	20002568 	.word	0x20002568
 8008470:	20002560 	.word	0x20002560
 8008474:	20002554 	.word	0x20002554
 8008478:	20002564 	.word	0x20002564

0800847c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d04a      	beq.n	8008524 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800848e:	2308      	movs	r3, #8
 8008490:	425b      	negs	r3, r3
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	4b22      	ldr	r3, [pc, #136]	@ (800852c <vPortFree+0xb0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <vPortFree+0x46>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	60fb      	str	r3, [r7, #12]
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	e7fd      	b.n	80084be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00b      	beq.n	80084e2 <vPortFree+0x66>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	60bb      	str	r3, [r7, #8]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	4b11      	ldr	r3, [pc, #68]	@ (800852c <vPortFree+0xb0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d019      	beq.n	8008524 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d115      	bne.n	8008524 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <vPortFree+0xb0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	43db      	mvns	r3, r3
 8008502:	401a      	ands	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008508:	f7fe fb8c 	bl	8006c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <vPortFree+0xb4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4413      	add	r3, r2
 8008516:	4a06      	ldr	r2, [pc, #24]	@ (8008530 <vPortFree+0xb4>)
 8008518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800851a:	6938      	ldr	r0, [r7, #16]
 800851c:	f000 f86c 	bl	80085f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008520:	f7fe fb8e 	bl	8006c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20002568 	.word	0x20002568
 8008530:	20002560 	.word	0x20002560

08008534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800853a:	f241 537c 	movw	r3, #5500	@ 0x157c
 800853e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008540:	4b27      	ldr	r3, [pc, #156]	@ (80085e0 <prvHeapInit+0xac>)
 8008542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <prvHeapInit+0xac>)
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800856c:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <prvHeapInit+0xb0>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008572:	4b1c      	ldr	r3, [pc, #112]	@ (80085e4 <prvHeapInit+0xb0>)
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008580:	2208      	movs	r2, #8
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <prvHeapInit+0xb4>)
 8008594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008596:	4b14      	ldr	r3, [pc, #80]	@ (80085e8 <prvHeapInit+0xb4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800859e:	4b12      	ldr	r3, [pc, #72]	@ (80085e8 <prvHeapInit+0xb4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <prvHeapInit+0xb4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	@ (80085ec <prvHeapInit+0xb8>)
 80085c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4a09      	ldr	r2, [pc, #36]	@ (80085f0 <prvHeapInit+0xbc>)
 80085ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085cc:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <prvHeapInit+0xc0>)
 80085ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000fd8 	.word	0x20000fd8
 80085e4:	20002554 	.word	0x20002554
 80085e8:	2000255c 	.word	0x2000255c
 80085ec:	20002564 	.word	0x20002564
 80085f0:	20002560 	.word	0x20002560
 80085f4:	20002568 	.word	0x20002568

080085f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008600:	4b28      	ldr	r3, [pc, #160]	@ (80086a4 <prvInsertBlockIntoFreeList+0xac>)
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <prvInsertBlockIntoFreeList+0x14>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d8f7      	bhi.n	8008606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4413      	add	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d108      	bne.n	800863a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d118      	bne.n	8008680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b15      	ldr	r3, [pc, #84]	@ (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d00d      	beq.n	8008676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e008      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008676:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e003      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d002      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20002554 	.word	0x20002554
 80086a8:	2000255c 	.word	0x2000255c

080086ac <memset>:
 80086ac:	4402      	add	r2, r0
 80086ae:	4603      	mov	r3, r0
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d100      	bne.n	80086b6 <memset+0xa>
 80086b4:	4770      	bx	lr
 80086b6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ba:	e7f9      	b.n	80086b0 <memset+0x4>

080086bc <__libc_init_array>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	4d0d      	ldr	r5, [pc, #52]	@ (80086f4 <__libc_init_array+0x38>)
 80086c0:	4c0d      	ldr	r4, [pc, #52]	@ (80086f8 <__libc_init_array+0x3c>)
 80086c2:	1b64      	subs	r4, r4, r5
 80086c4:	10a4      	asrs	r4, r4, #2
 80086c6:	2600      	movs	r6, #0
 80086c8:	42a6      	cmp	r6, r4
 80086ca:	d109      	bne.n	80086e0 <__libc_init_array+0x24>
 80086cc:	4d0b      	ldr	r5, [pc, #44]	@ (80086fc <__libc_init_array+0x40>)
 80086ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008700 <__libc_init_array+0x44>)
 80086d0:	f000 f826 	bl	8008720 <_init>
 80086d4:	1b64      	subs	r4, r4, r5
 80086d6:	10a4      	asrs	r4, r4, #2
 80086d8:	2600      	movs	r6, #0
 80086da:	42a6      	cmp	r6, r4
 80086dc:	d105      	bne.n	80086ea <__libc_init_array+0x2e>
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e4:	4798      	blx	r3
 80086e6:	3601      	adds	r6, #1
 80086e8:	e7ee      	b.n	80086c8 <__libc_init_array+0xc>
 80086ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ee:	4798      	blx	r3
 80086f0:	3601      	adds	r6, #1
 80086f2:	e7f2      	b.n	80086da <__libc_init_array+0x1e>
 80086f4:	08008988 	.word	0x08008988
 80086f8:	08008988 	.word	0x08008988
 80086fc:	08008988 	.word	0x08008988
 8008700:	0800898c 	.word	0x0800898c

08008704 <memcpy>:
 8008704:	440a      	add	r2, r1
 8008706:	4291      	cmp	r1, r2
 8008708:	f100 33ff 	add.w	r3, r0, #4294967295
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	4770      	bx	lr
 8008710:	b510      	push	{r4, lr}
 8008712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871a:	4291      	cmp	r1, r2
 800871c:	d1f9      	bne.n	8008712 <memcpy+0xe>
 800871e:	bd10      	pop	{r4, pc}

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
